<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CHANNELID" elementType="Argument">
            <stringProp name="Argument.name">CHANNELID</stringProp>
            <stringProp name="Argument.value">keadesktop</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOCALE" elementType="Argument">
            <stringProp name="Argument.name">LOCALE</stringProp>
            <stringProp name="Argument.value">en-US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NAME" elementType="Argument">
            <stringProp name="Argument.name">NAME</stringProp>
            <stringProp name="Argument.value">priyanka</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APPNAME" elementType="Argument">
            <stringProp name="Argument.name">APPNAME</stringProp>
            <stringProp name="Argument.value">ab483552482324c57b81afc1579fed2c4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TOKEN" elementType="Argument">
            <stringProp name="Argument.name">TOKEN</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlcyI6WyJjcmVhdG9yIiwidmlld2VyIl0sImVtYWlsIjoicHJpeWFua2EubUBwdXJwbGVzbGF0ZS5pbiIsImFjdGl2ZSI6dHJ1ZSwiY2xpZW50SWQiOiJkMGE1NjgyZi04ZTZkLTRjNWUtOGY0OC1hMTIzYTJjODM4ZTEiLCJ1c2VyVHlwZSI6Imdvb2dsZSIsImdpdmVuX25hbWUiOiJQcml5YW5rYSIsImZhbWlseV9uYW1lIjoiTSIsIm5hbWUiOiJQcml5YW5rYSBNIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBVFhBSnpKUkZ6YjhxclB6ek9UemI5V3owczVZamE1M1pmSDFOc3FwS1JwPXM5Ni1jIiwiYXpwIjoiOWIzOWU0MjgtOGU5ZC00ZTk2LWJhZTQtZjVkMmNiZmVhOWY2IiwiYXVkIjoiOWIzOWU0MjgtOGU5ZC00ZTk2LWJhZTQtZjVkMmNiZmVhOWY2IiwidXNlck5hbWUiOiJwcml5YW5rYS5tQHB1cnBsZXNsYXRlLmluIiwiaWF0IjoxNjI3MjA4MTEzLCJleHAiOjI2MjcyMTE3MTMsImlzcyI6Imh0dHBzOi8vaWRlbnRpdHkucHVycGxlc2xhdGUuY29tIn0.ZihD5Cb9dhW8In7SwiR9G-JU2nTDaOYyjszNXFPi1sGeT38iyq69vm71AuizIe2aj2h14mYFc1cj7AJl5ZRnMLJ3yUIFCA0yW-OYRRbwkrNcSzIS_pEzwds_sdyXw6Ee3lyM7gb9u4xBXiHRxomZRfvKEeRyjjLpGD9-RrBUuR0PBgCrgUgjWqeW9TjaPxvaokBD2CZUtrU6BJ_gePIYSCmPhqLIdrcRcGlFov-b2lpzkVHVYwOrkxXtskgnQOlP4Tok7gu7KEEFAXZIh8rRFwcrE70ah5-10W827EUWrV1T7r2ioaXBENaks3EH6ToGFW0AmBZY43T8yVE45J8qBA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERID" elementType="Argument">
            <stringProp name="Argument.name">USERID</stringProp>
            <stringProp name="Argument.value">80db0763-15d9-3fe3-a30e-094ad36b3979</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">api.kea.purpleslate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/keaparrothttp/ps-parrot/api/messages</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="psKea1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">3.6.188.62</stringProp>
          <stringProp name="HTTPSampler.port">22</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api.kea.purpleslate.com</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="109201676">sales</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales  for california in 2018 and 2019" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1344677708">sales  for california in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales by category" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-695646829">sales by category</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales by category and by sub category" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1145954737">sales by category and by sub category</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales by state and category" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1610508629">sales by state and category</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sub category with maximum sales" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="88901044">sub category with maximum sales</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="most popular city by sales in 2018 and 2019" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-15592421">most popular city by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="top 3 city by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="847792559">top 3 city by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="bottom 3 city by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-2006621287">bottom 3 city by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="percentage of california by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1104692505">percentage of california by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="percentage of technology by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1384462395">percentage of technology by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="percentage of furniture by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="427455739">percentage of furniture by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales percentage of furniture in california for 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-51404159">sales percentage of furniture in california for 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="city in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1216387304">city in 2018 and  2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="ship mode in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1865372504">ship mode in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sum of sales in california" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1003806251">sum of sales in california</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="average of sales by city" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1148498330">average of sales by city</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales greater than 10000" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1813850132">sales greater than 10000</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="range of sales in california" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="213005049">range of sales in california</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales less than 2" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1280268090">sales less than 2</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales in 2017 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="518009380">sales in 2017 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales in 2017 and 2019 by category" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-392541525">sales in 2017 and 2019 by category</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="top 3 furniture sales in 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="707871815">top 3 furniture sales in 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="category with minimum sales" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-742921470">category with minimum sales</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="least popular city by sales in 2018 and 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1455805835">least popular city by sales in 2018 and 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales for mc-17845" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1296715289">sales for mc-17845</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="number of state in 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1480621088">number of state in 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales in the first quarter of 2019" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="589934485">sales in the first quarter of 2019</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales between 5000 and 15000" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-203342166">sales between 5000 and 15000</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="trend of sales" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-487797594">trend of sales</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="trend of sales in texas" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1336132072">trend of sales in texas</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales by category in texas" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1589346357">sales by category in texas</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="sales by state and category in new york" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1802018571">sales by state and category in new york</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="count of city in furniture" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="434262964">count of city in furniture</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="compare sales of california and new york" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-56932602">compare sales of california and new york</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="daily count of ship mode" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1970938154">daily count of ship mode</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="daily count of ship mode in california" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2077785289">daily count of ship mode in california</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="category by sub category" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1107651813">category by sub category</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="category by sub category in new york" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-616976337">category by sub category in new york</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="daily count of orders" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1494926198">daily count of orders</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="daily count of orders in texas" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-349245112">daily count of orders in texas</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="orders by category" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1173169228">orders by category </stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="orders by category in texas" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-425969774">orders by category in texas</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${TOKEN}</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">postman-token</stringProp>
              <stringProp name="Header.value">45d3590e-c9b0-4847-a13c-2b790d28b551</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">username</stringProp>
              <stringProp name="Header.value">${NAME}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">userid</stringProp>
              <stringProp name="Header.value">${USERID}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">appid</stringProp>
              <stringProp name="Header.value">${APPNAME}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">channelType</stringProp>
              <stringProp name="Header.value">${CHANNELID}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:573559.29,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;19.32%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The sales has gone up by 92856.7 or 19.32%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:225.46,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 225.46&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: true,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [&#xd;
      {&#xd;
        &quot;type&quot;: &quot;daterange&quot;,&#xd;
        &quot;name&quot;: &quot;daterange&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;2019-01-01,2019-12-31&quot;,&#xd;
        &quot;value&quot;: &quot;2019-01-01,2019-12-31&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;type&quot;: &quot;measure&quot;,&#xd;
        &quot;name&quot;: &quot;measure&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;sales&quot;,&#xd;
        &quot;value&quot;: &quot;sales&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[39462.88658571243,23506.78231072426,52891.38480293751,40021.68022727966,44774.9321898222,47220.49793922901,47183.87308752537,63760.01971805096,91427.86670136452,75551.66107082367,47757.7058981657],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[479442,611325,1458945,480702,573559,560551],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend (Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[294288.8599141836,121121.48868346214,117508.78797447681,40640.15395951271],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales less than 2" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales less than 2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales less than 2&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;lt&quot;,&quot;resolutionValue&quot;:&quot;2&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:32.6,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales Less Than 2&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;19.69%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone up by 5.36 or 19.69%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:1.48,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 1.48&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:22,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 22 rows, forming 0.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales less than 2&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;lt&quot;,&quot;resolutionValue&quot;:&quot;2&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 22 values, 0 or 0% are zeroes and 22 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales less than 2&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;lt&quot;,&quot;resolutionValue&quot;:&quot;2&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[2.343999981880188,6.73799991607666,8.491999983787537,2.0679999589920044,1.0800000429153442,1.5839999914169312,5.20799994468689,2.430000066757202,2.656000018119812],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales less than 2&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;lt&quot;,&quot;resolutionValue&quot;:&quot;2&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[19,34,83,27,32,67],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales less than 2&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;lt&quot;,&quot;resolutionValue&quot;:&quot;2&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;,&quot;Second Class&quot;],&quot;yAxis&quot;:[23.28599989414215,5.606000065803528,1.9639999866485596,1.74399995803833],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales greater than 10000" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales greater than 10000" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales greater than 10000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;gt&quot;,&quot;resolutionValue&quot;:&quot;10000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:25199.93,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales Greater Than 10000&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;11.31%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone up by 2561.45 or 11.31%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:12599.96,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 12599.96&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2 rows, forming 0.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales greater than 10000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;gt&quot;,&quot;resolutionValue&quot;:&quot;10000&quot;,&quot;value&quot;:&quot;10000&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2 values, 0 or 0% are zeroes and 2 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales greater than 10000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;:[{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;gt&quot;,&quot;resolutionValue&quot;:&quot;10000&quot;,&quot;value&quot;:&quot;10000&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;],&quot;yAxis&quot;:[13999.9599609375,11199.9677734375],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales greater than 10000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;gt&quot;,&quot;resolutionValue&quot;:&quot;10000&quot;,&quot;value&quot;:&quot;10000&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[17499,71399,22638,25199,13592],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales greater than 10000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;gt&quot;,&quot;resolutionValue&quot;:&quot;10000&quot;,&quot;value&quot;:&quot;10000&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;First Class&quot;],&quot;yAxis&quot;:[25199.927734375],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales in 2017 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales in 2017 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:2032504.56,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales In 2017 And 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;86.17%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone up by 940769.29 or 86.17%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:222.94,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 222.94&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:9117,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 9117 rows, forming 57.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 9117 values, 0 or 0% are zeroes and 9117 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2017-01-01T00:00:00.000&quot;,&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[1458945.269093275,480702.585942328,573559.2905316353],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[479442,611325,1458945,480702,573559,560551],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[1082740.9501308203,413443.6940398216,398128.2817198038,138191.63373446465],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales for mc-17845" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales for mc-17845" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales for mc-17845&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;customer_id&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;mc-17845&quot;,&quot;value&quot;:&quot;mc-17845&quot;,&quot;displayName&quot;:&quot;Customer ID&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:429.59,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales For Mc-17845&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-64.45%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -778.97 or -64.45%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:214.8,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 214.8&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2 rows, forming 0.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales for mc-17845&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;:[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;customer_id&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;mc-17845&quot;,&quot;value&quot;:&quot;mc-17845&quot;,&quot;displayName&quot;:&quot;Customer ID&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2 values, 0 or 0% are zeroes and 2 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales for mc-17845&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;:[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;customer_id&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;mc-17845&quot;,&quot;value&quot;:&quot;mc-17845&quot;,&quot;displayName&quot;:&quot;Customer ID&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[243.62000179290771,1066.6440258026123,777.2319831848145,154.0800018310547,3259.548022031784,2033.303997039795,1024.8269619941711,3183.568049430847,3602.308048248291,1328.001986503601,528.7580051422119],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales for mc-17845&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;customer_id&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;mc-17845&quot;,&quot;value&quot;:&quot;mc-17845&quot;,&quot;displayName&quot;:&quot;Customer ID&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[491,4210,1208,429,-645],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales for mc-17845&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;customer_id&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;mc-17845&quot;,&quot;value&quot;:&quot;mc-17845&quot;,&quot;displayName&quot;:&quot;Customer ID&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[2]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;],&quot;yAxis&quot;:[429.5919876098633],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales in the first quarter of 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales in the first quarter of 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in the first quarter of 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-03-31&quot;,&quot;value&quot;:&quot;the first quarter of 2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:115861.05,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales In The First Quarter Of 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-32.75%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -56426.42 or -32.75%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:243.92,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 243.92&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:475,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 475 rows, forming 3.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in the first quarter of 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-03-31&quot;,&quot;value&quot;:&quot;the first quarter of 2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 475 values, 0 or 0% are zeroes and 475 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in the first quarter of 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-03-31&quot;,&quot;value&quot;:&quot;the first quarter of 2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-12-31T00:00:00.000&quot;,&quot;2019-01-07T00:00:00.000&quot;,&quot;2019-01-14T00:00:00.000&quot;,&quot;2019-01-21T00:00:00.000&quot;,&quot;2019-01-28T00:00:00.000&quot;,&quot;2019-02-04T00:00:00.000&quot;,&quot;2019-02-11T00:00:00.000&quot;,&quot;2019-02-18T00:00:00.000&quot;,&quot;2019-02-25T00:00:00.000&quot;,&quot;2019-03-04T00:00:00.000&quot;,&quot;2019-03-11T00:00:00.000&quot;,&quot;2019-03-18T00:00:00.000&quot;,&quot;2019-03-25T00:00:00.000&quot;],&quot;yAxis&quot;:[3561.381993293762,6667.07288646698,14894.459785938263,9870.629988193512,5957.341932296753,7511.819902896881,2895.3469808101654,7092.223378658295,5805.166036725044,5547.605932474136,8196.075006723404,9514.017961740494,28347.91191315651],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Weekly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in the first quarter of 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-03-31&quot;,&quot;value&quot;:&quot;the first quarter of 2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[479442,611325,1458945,480702,573559,560551],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in the first quarter of 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-03-31&quot;,&quot;value&quot;:&quot;the first quarter of 2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;First Class&quot;,&quot;Second Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[54323.87268316746,31595.991272449493,25955.406756401062,3985.782987356186],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales between 5000 and 15000" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales between 5000 and 15000" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales between 5000 and 15000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;between&quot;,&quot;resolutionValue&quot;:&quot;5000,15000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:48927.79,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales Between 5000 And 15000&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;49.18%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone up by 16130.28 or 49.18%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:8154.63,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 8154.63&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:6,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 6 rows, forming 0.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales between 5000 and 15000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;between&quot;,&quot;resolutionValue&quot;:&quot;5000,15000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 6 values, 0 or 0% are zeroes and 6 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales between 5000 and 15000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;between&quot;,&quot;resolutionValue&quot;:&quot;5000,15000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[5443.9599609375,13999.9599609375,21483.8876953125,7999.97998046875],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales between 5000 and 15000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;:[{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;between&quot;,&quot;resolutionValue&quot;:&quot;5000,15000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[6354,41542,118855,32797,48927,119315],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales between 5000 and 15000&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;measure_value&quot;,&quot;name&quot;:&quot;sales&quot;,&quot;operator&quot;:&quot;between&quot;,&quot;resolutionValue&quot;:&quot;5000,15000&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;displayName&quot;:&quot;Sales&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]}],&quot;xAxis&quot;:[&quot;First Class&quot;,&quot;Standard Class&quot;,&quot;Same Day&quot;,&quot;Second Class&quot;],&quot;yAxis&quot;:[25199.927734375,10283.919921875,7999.97998046875,5443.9599609375],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="city in 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city in  2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:573559.2905316353,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;19.32%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales is trending up by 92856.70 or 19.32%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:225.4556959636931,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:573559.2905316353,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;19.32%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales is trending up by 92856.70 or 19.32%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:225.4556959636931,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[39462.88658571243,23506.78231072426,52891.38480293751,40021.68022727966,44774.9321898222,47220.49793922901,47183.87308752537,63760.01971805096,91427.86670136452,75551.66107082367,47757.7058981657],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[479442,611325,1458945,480702,573559,560551],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="city in 2018 and  2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city in 2018 and  2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in 2018 and  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City Count&quot;,&quot;value&quot;:387,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;City has an unique count of 387 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:4568,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 4568 rows, forming 28.8% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;8.1&quot;,&quot;7.2&quot;,&quot;6.0&quot;,&quot;5.5&quot;,&quot;5.0&quot;,&quot;3.7&quot;,&quot;3.5&quot;,&quot;2.6&quot;,&quot;1.8&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.1&quot;,&quot;0.9&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[368,327,273,249,227,167,161,118,83,69,66,61,52,43,38,33,32,31,29,29,29,27,26,26,25,25,24,22,22,21,21,21,21,21,21,21,19,19,19,19,19,19,18,18,17,17,16,16,16,15,15,15,15,14,14,14,14,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}],&quot;xAxis&quot;:[&quot;New York City&quot;,&quot;Los Angeles&quot;,&quot;San Francisco&quot;,&quot;Philadelphia&quot;,&quot;Seattle&quot;,&quot;Chicago&quot;,&quot;Houston&quot;,&quot;Columbus&quot;,&quot;Dallas&quot;,&quot;Springfield&quot;,&quot;San Diego&quot;,&quot;Jacksonville&quot;,&quot;Richmond&quot;,&quot;Columbia&quot;,&quot;Louisville&quot;,&quot;Newark&quot;,&quot;Jackson&quot;,&quot;Lakewood&quot;,&quot;Detroit&quot;,&quot;Fairfield&quot;,&quot;Miami&quot;,&quot;Phoenix&quot;,&quot;Aurora&quot;,&quot;Charlotte&quot;,&quot;Arlington&quot;,&quot;Long Beach&quot;,&quot;San Antonio&quot;,&quot;Fresno&quot;,&quot;Tampa&quot;,&quot;Austin&quot;,&quot;Baltimore&quot;,&quot;Henderson&quot;,&quot;Huntsville&quot;,&quot;Lancaster&quot;,&quot;Salem&quot;,&quot;Tucson&quot;,&quot;Cleveland&quot;,&quot;Decatur&quot;,&quot;Fayetteville&quot;,&quot;Knoxville&quot;,&quot;Rochester&quot;,&quot;San Jose&quot;,&quot;Concord&quot;,&quot;Lafayette&quot;,&quot;Lawrence&quot;,&quot;Wilmington&quot;,&quot;Milwaukee&quot;,&quot;Pasadena&quot;,&quot;Westminster&quot;,&quot;Cranston&quot;,&quot;Denver&quot;,&quot;El Paso&quot;,&quot;Indianapolis&quot;,&quot;Albuquerque&quot;,&quot;Atlanta&quot;,&quot;Nashville&quot;,&quot;Peoria&quot;,&quot;Alexandria&quot;,&quot;Lakeville&quot;,&quot;Memphis&quot;,&quot;Minneapolis&quot;,&quot;Oakland&quot;,&quot;Tulsa&quot;,&quot;Akron&quot;,&quot;Brentwood&quot;,&quot;Burlington&quot;,&quot;Florence&quot;,&quot;Fort Worth&quot;,&quot;Kent&quot;,&quot;Plano&quot;,&quot;Sandy Springs&quot;,&quot;Des Moines&quot;,&quot;Edmonds&quot;,&quot;Everett&quot;,&quot;Lowell&quot;,&quot;Marion&quot;,&quot;Portland&quot;,&quot;Virginia Beach&quot;,&quot;Chesapeake&quot;,&quot;Glendale&quot;,&quot;Inglewood&quot;,&quot;Lakeland&quot;,&quot;Midland&quot;,&quot;Pembroke Pines&quot;,&quot;Tempe&quot;,&quot;Toledo&quot;,&quot;Trenton&quot;,&quot;Bakersfield&quot;,&quot;Chester&quot;,&quot;Fargo&quot;,&quot;Hialeah&quot;,&quot;Jonesboro&quot;,&quot;Little Rock&quot;,&quot;Monroe&quot;,&quot;Roswell&quot;,&quot;Sioux Falls&quot;,&quot;Westland&quot;,&quot;Yonkers&quot;,&quot;Apple Valley&quot;,&quot;Bloomington&quot;,&quot;Clinton&quot;,&quot;Corpus Christi&quot;,&quot;Franklin&quot;,&quot;Gilbert&quot;,&quot;Great Falls&quot;,&quot;Johnson City&quot;,&quot;Meriden&quot;,&quot;Mount Vernon&quot;,&quot;North Las Vegas&quot;,&quot;Omaha&quot;,&quot;Provo&quot;,&quot;Raleigh&quot;,&quot;Tallahassee&quot;,&quot;Troy&quot;,&quot;Bristol&quot;,&quot;Cincinnati&quot;,&quot;Danville&quot;,&quot;Dover&quot;,&quot;Dublin&quot;,&quot;New Rochelle&quot;,&quot;Newport News&quot;,&quot;Oklahoma City&quot;,&quot;Orlando&quot;,&quot;Quincy&quot;,&quot;Saint Petersburg&quot;,&quot;Skokie&quot;,&quot;Southaven&quot;,&quot;Bossier City&quot;,&quot;Boynton Beach&quot;,&quot;Brownsville&quot;,&quot;Chico&quot;,&quot;Dearborn Heights&quot;,&quot;Des Plaines&quot;,&quot;Fort Collins&quot;,&quot;Greensboro&quot;,&quot;Hackensack&quot;,&quot;Harrisonburg&quot;,&quot;Hollywood&quot;,&quot;League City&quot;,&quot;Mentor&quot;,&quot;Mesa&quot;,&quot;Pasco&quot;,&quot;Plainfield&quot;,&quot;Pleasant Grove&quot;,&quot;Santa Ana&quot;,&quot;Scottsdale&quot;,&quot;Tigard&quot;,&quot;Watertown&quot;,&quot;Anaheim&quot;,&quot;Beaumont&quot;,&quot;Cary&quot;,&quot;Chandler&quot;,&quot;Chattanooga&quot;,&quot;Clarksville&quot;,&quot;Colorado Springs&quot;,&quot;Costa Mesa&quot;,&quot;Freeport&quot;,&quot;Huntington Beach&quot;,&quot;Las Vegas&quot;,&quot;Logan&quot;,&quot;Manchester&quot;,&quot;Mesquite&quot;,&quot;Middletown&quot;,&quot;Montgomery&quot;,&quot;Moreno Valley&quot;,&quot;Providence&quot;,&quot;Redondo Beach&quot;,&quot;Riverside&quot;,&quot;Round Rock&quot;,&quot;Sacramento&quot;,&quot;Tyler&quot;,&quot;Utica&quot;,&quot;Waco&quot;,&quot;Waterbury&quot;,&quot;Wheeling&quot;,&quot;Athens&quot;,&quot;Auburn&quot;,&quot;Bedford&quot;,&quot;Belleville&quot;,&quot;Bryan&quot;,&quot;Buffalo&quot;,&quot;Carrollton&quot;,&quot;Deltona&quot;,&quot;Durham&quot;,&quot;Fort Lauderdale&quot;,&quot;Hampton&quot;,&quot;Hempstead&quot;,&quot;Hoover&quot;,&quot;Lawton&quot;,&quot;Lorain&quot;,&quot;Loveland&quot;,&quot;Macon&quot;,&quot;Maple Grove&quot;,&quot;Murray&quot;,&quot;Muskogee&quot;,&quot;Naperville&quot;,&quot;Oceanside&quot;,&quot;Olathe&quot;,&quot;Olympia&quot;,&quot;Orange&quot;,&quot;Overland Park&quot;,&quot;Palm Coast&quot;,&quot;Parma&quot;,&quot;Pomona&quot;,&quot;Redmond&quot;,&quot;Saint Louis&quot;,&quot;Salt Lake City&quot;,&quot;San Marcos&quot;,&quot;Smyrna&quot;,&quot;Vallejo&quot;,&quot;Vineland&quot;,&quot;Wausau&quot;,&quot;Woodstock&quot;,&quot;Apopka&quot;,&quot;Asheville&quot;,&quot;Avondale&quot;,&quot;Bangor&quot;,&quot;Bellingham&quot;,&quot;Burbank&quot;,&quot;Caldwell&quot;,&quot;Carlsbad&quot;,&quot;Coppell&quot;,&quot;Draper&quot;,&quot;Eagan&quot;,&quot;Fremont&quot;,&quot;Grand Prairie&quot;,&quot;Grand Rapids&quot;,&quot;Greenville&quot;,&quot;Greenwood&quot;,&quot;Hamilton&quot;,&quot;Lake Charles&quot;,&quot;Lubbock&quot;,&quot;Madison&quot;,&quot;Manteca&quot;,&quot;Mason&quot;,&quot;Mcallen&quot;,&quot;Medina&quot;,&quot;Meridian&quot;,&quot;Milford&quot;,&quot;Mission Viejo&quot;,&quot;Modesto&quot;,&quot;Morristown&quot;,&quot;Odessa&quot;,&quot;Orem&quot;,&quot;Oswego&quot;,&quot;Pearland&quot;,&quot;Pocatello&quot;,&quot;Pompano Beach&quot;,&quot;Rancho Cucamonga&quot;,&quot;Reading&quot;,&quot;Rome&quot;,&quot;Roseville&quot;,&quot;Saint Charles&quot;,&quot;Saint Cloud&quot;,&quot;San Gabriel&quot;,&quot;Santa Clara&quot;,&quot;Spokane&quot;,&quot;Suffolk&quot;,&quot;Thousand Oaks&quot;,&quot;Warwick&quot;,&quot;Waynesboro&quot;,&quot;Woonsocket&quot;,&quot;Bolingbrook&quot;,&quot;Buffalo Grove&quot;,&quot;Cambridge&quot;,&quot;Cedar Hill&quot;,&quot;Clifton&quot;,&quot;Clovis&quot;,&quot;Coachella&quot;,&quot;Coon Rapids&quot;,&quot;Coral Springs&quot;,&quot;Elkhart&quot;,&quot;Elmhurst&quot;,&quot;Escondido&quot;,&quot;Farmington&quot;,&quot;Garland&quot;,&quot;Georgetown&quot;,&quot;Greeley&quot;,&quot;Green Bay&quot;,&quot;Gresham&quot;,&quot;Harlingen&quot;,&quot;Jamestown&quot;,&quot;La Mesa&quot;,&quot;Lake Forest&quot;,&quot;Lansing&quot;,&quot;Laredo&quot;,&quot;Laurel&quot;,&quot;Lodi&quot;,&quot;Mansfield&quot;,&quot;Marietta&quot;,&quot;Medford&quot;,&quot;Moorhead&quot;,&quot;New Brunswick&quot;,&quot;Oak Park&quot;,&quot;Perth Amboy&quot;,&quot;Pine Bluff&quot;,&quot;Pueblo&quot;,&quot;Rapid City&quot;,&quot;Reno&quot;,&quot;Revere&quot;,&quot;Rockford&quot;,&quot;Sanford&quot;,&quot;Santa Barbara&quot;,&quot;Texarkana&quot;,&quot;Torrance&quot;,&quot;Washington&quot;,&quot;Westfield&quot;,&quot;Woodland&quot;,&quot;York&quot;,&quot;Amarillo&quot;,&quot;Appleton&quot;,&quot;Bellevue&quot;,&quot;Billings&quot;,&quot;Boca Raton&quot;,&quot;Boise&quot;,&quot;Bowling Green&quot;,&quot;Camarillo&quot;,&quot;Chapel Hill&quot;,&quot;Chula Vista&quot;,&quot;Citrus Heights&quot;,&quot;Commerce City&quot;,&quot;Cuyahoga Falls&quot;,&quot;Dearborn&quot;,&quot;Delray Beach&quot;,&quot;Eau Claire&quot;,&quot;El Cajon&quot;,&quot;Evanston&quot;,&quot;Frisco&quot;,&quot;Garden City&quot;,&quot;Grand Island&quot;,&quot;Gulfport&quot;,&quot;Helena&quot;,&quot;Hesperia&quot;,&quot;Hickory&quot;,&quot;Independence&quot;,&quot;Irving&quot;,&quot;Keller&quot;,&quot;Kenosha&quot;,&quot;Kissimmee&quot;,&quot;La Porte&quot;,&quot;Laguna Niguel&quot;,&quot;Las Cruces&quot;,&quot;Lebanon&quot;,&quot;Lewiston&quot;,&quot;Linden&quot;,&quot;Manhattan&quot;,&quot;Margate&quot;,&quot;Melbourne&quot;,&quot;Miramar&quot;,&quot;Mishawaka&quot;,&quot;Missouri City&quot;,&quot;Mobile&quot;,&quot;Mount Pleasant&quot;,&quot;Murfreesboro&quot;,&quot;Nashua&quot;,&quot;New Bedford&quot;,&quot;Niagara Falls&quot;,&quot;North Miami&quot;,&quot;Norwich&quot;,&quot;Ormond Beach&quot;,&quot;Owensboro&quot;,&quot;Oxnard&quot;,&quot;Pharr&quot;,&quot;Pico Rivera&quot;,&quot;Port Arthur&quot;,&quot;Port Saint Lucie&quot;,&quot;Portage&quot;,&quot;Redding&quot;,&quot;Rochester Hills&quot;,&quot;Rock Hill&quot;,&quot;Rogers&quot;,&quot;Romeoville&quot;,&quot;Royal Oak&quot;,&quot;Salinas&quot;,&quot;San Mateo&quot;,&quot;Santa Fe&quot;,&quot;Springdale&quot;,&quot;Sunnyvale&quot;,&quot;Texas City&quot;,&quot;Thornton&quot;,&quot;Tuscaloosa&quot;,&quot;Vacaville&quot;,&quot;Vancouver&quot;,&quot;Waterloo&quot;,&quot;West Jordan&quot;,&quot;Wichita&quot;,&quot;Yuma&quot;],&quot;yAxis&quot;:[368,327,273,249,227,167,161,118,83,69,66,61,52,43,38,33,32,31,29,29,29,27,26,26,25,25,24,22,22,21,21,21,21,21,21,21,19,19,19,19,19,19,18,18,17,17,16,16,16,15,15,15,15,14,14,14,14,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;City Count&quot;,&quot;chartTitle&quot;:&quot;City Count By City&quot;,&quot;xAxisLabel&quot;:&quot;City&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in 2018 and  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 4568 values, 0 or 0% are zeroes and 4568 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in 2018 and  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[2024,2544],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;City Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;city_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;city in 2018 and  2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;City Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;city_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="number of state in 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="number of state in 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;number of state in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;state&quot;,&quot;value&quot;:&quot;state&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;state_count&quot;,&quot;resolutionValue&quot;:&quot;state_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;State Count&quot;,&quot;value&quot;:47,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;State has an unique count of 47 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.4&quot;,&quot;9.8&quot;,&quot;9.5&quot;,&quot;6.6&quot;,&quot;6.1&quot;,&quot;5.5&quot;,&quot;4.7&quot;,&quot;4.0&quot;,&quot;2.7&quot;,&quot;2.5&quot;,&quot;2.3&quot;,&quot;2.2&quot;,&quot;1.8&quot;,&quot;1.7&quot;,&quot;1.4&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;0.9&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;]},{&quot;recordCount&quot;:[518,250,242,169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Texas&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Ohio&quot;,&quot;Florida&quot;,&quot;North Carolina&quot;,&quot;Tennessee&quot;,&quot;Georgia&quot;,&quot;Arizona&quot;,&quot;Indiana&quot;,&quot;Michigan&quot;,&quot;Colorado&quot;,&quot;Virginia&quot;,&quot;Maryland&quot;,&quot;New Jersey&quot;,&quot;Minnesota&quot;,&quot;Kentucky&quot;,&quot;Connecticut&quot;,&quot;Oregon&quot;,&quot;Massachusetts&quot;,&quot;Missouri&quot;,&quot;Rhode Island&quot;,&quot;Wisconsin&quot;,&quot;Delaware&quot;,&quot;New Mexico&quot;,&quot;Oklahoma&quot;,&quot;Utah&quot;,&quot;Arkansas&quot;,&quot;Iowa&quot;,&quot;Louisiana&quot;,&quot;Alabama&quot;,&quot;Idaho&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;South Dakota&quot;,&quot;Nebraska&quot;,&quot;Kansas&quot;,&quot;Montana&quot;,&quot;Nevada&quot;,&quot;North Dakota&quot;,&quot;South Carolina&quot;,&quot;Vermont&quot;,&quot;West Virginia&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[518,250,242,169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;State Count&quot;,&quot;chartTitle&quot;:&quot;State Count By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;number of state in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;state&quot;,&quot;value&quot;:&quot;state&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;state_count&quot;,&quot;resolutionValue&quot;:&quot;state_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;State - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;number of state in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;state&quot;,&quot;value&quot;:&quot;state&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;state_count&quot;,&quot;resolutionValue&quot;:&quot;state_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[132,118,225,197,243,243,222,226,452,295,191],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;State Count - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;state_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;number of state in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;state&quot;,&quot;value&quot;:&quot;state&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;state_count&quot;,&quot;resolutionValue&quot;:&quot;state_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;State Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;state_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="ship mode in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ship mode in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;ship mode in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Ship Mode Count&quot;,&quot;value&quot;:4,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Ship Mode has an unique count of 4 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:4568,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 4568 rows, forming 28.8% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;59.4&quot;,&quot;19.3&quot;,&quot;16.3&quot;,&quot;5.0&quot;]},{&quot;recordCount&quot;:[2712,883,743,230]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[2712,883,743,230],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Ship Mode Count&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;ship mode in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Ship Mode - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 4568 values, 0 or 0% are zeroes and 4568 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;ship mode in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[2024,2544],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;ship mode in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="count of city in furniture" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="count of city in furniture" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;count of city in furniture&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City Count&quot;,&quot;value&quot;:158,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;City has an unique count of 158 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:511,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 511 rows, forming 3.2% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;1.9&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.3&quot;,&quot;1.0&quot;,&quot;0.9&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[48,36,32,32,26,24,13,12,11,8,8,6,6,6,6,6,5,5,5,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}],&quot;xAxis&quot;:[&quot;New York City&quot;,&quot;Los Angeles&quot;,&quot;Philadelphia&quot;,&quot;Seattle&quot;,&quot;San Francisco&quot;,&quot;Chicago&quot;,&quot;Columbus&quot;,&quot;Houston&quot;,&quot;Dallas&quot;,&quot;Jacksonville&quot;,&quot;Lakewood&quot;,&quot;Columbia&quot;,&quot;Detroit&quot;,&quot;Lafayette&quot;,&quot;Newark&quot;,&quot;Springfield&quot;,&quot;Aurora&quot;,&quot;Knoxville&quot;,&quot;San Diego&quot;,&quot;Cleveland&quot;,&quot;Cranston&quot;,&quot;Phoenix&quot;,&quot;Tampa&quot;,&quot;Westminster&quot;,&quot;Arlington&quot;,&quot;Bakersfield&quot;,&quot;Baltimore&quot;,&quot;Chico&quot;,&quot;Concord&quot;,&quot;Fayetteville&quot;,&quot;Fort Worth&quot;,&quot;Henderson&quot;,&quot;Louisville&quot;,&quot;Memphis&quot;,&quot;Mentor&quot;,&quot;Miami&quot;,&quot;Milwaukee&quot;,&quot;Monroe&quot;,&quot;Oakland&quot;,&quot;Pasadena&quot;,&quot;Richmond&quot;,&quot;Troy&quot;,&quot;Charlotte&quot;,&quot;Chester&quot;,&quot;Clarksville&quot;,&quot;Clinton&quot;,&quot;Costa Mesa&quot;,&quot;Decatur&quot;,&quot;Fairfield&quot;,&quot;Florence&quot;,&quot;Fort Collins&quot;,&quot;Franklin&quot;,&quot;Fresno&quot;,&quot;Gilbert&quot;,&quot;Greenville&quot;,&quot;Huntsville&quot;,&quot;Inglewood&quot;,&quot;Jackson&quot;,&quot;Lakeland&quot;,&quot;Milford&quot;,&quot;Nashville&quot;,&quot;Oak Park&quot;,&quot;Rochester&quot;,&quot;Roswell&quot;,&quot;Salem&quot;,&quot;San Jose&quot;,&quot;Tulsa&quot;,&quot;Watertown&quot;,&quot;Akron&quot;,&quot;Amarillo&quot;,&quot;Apple Valley&quot;,&quot;Atlanta&quot;,&quot;Auburn&quot;,&quot;Austin&quot;,&quot;Bellingham&quot;,&quot;Boynton Beach&quot;,&quot;Cambridge&quot;,&quot;Citrus Heights&quot;,&quot;Coral Springs&quot;,&quot;Danville&quot;,&quot;Dearborn&quot;,&quot;Dearborn Heights&quot;,&quot;Des Moines&quot;,&quot;Draper&quot;,&quot;Dublin&quot;,&quot;Edmonds&quot;,&quot;El Paso&quot;,&quot;Everett&quot;,&quot;Farmington&quot;,&quot;Freeport&quot;,&quot;Frisco&quot;,&quot;Greeley&quot;,&quot;Greensboro&quot;,&quot;Hesperia&quot;,&quot;Indianapolis&quot;,&quot;Kent&quot;,&quot;La Porte&quot;,&quot;Laguna Niguel&quot;,&quot;Lake Forest&quot;,&quot;Lancaster&quot;,&quot;Lansing&quot;,&quot;Las Cruces&quot;,&quot;Laurel&quot;,&quot;Lawrence&quot;,&quot;Lawton&quot;,&quot;League City&quot;,&quot;Long Beach&quot;,&quot;Lorain&quot;,&quot;Mansfield&quot;,&quot;Marion&quot;,&quot;Meridian&quot;,&quot;Mesa&quot;,&quot;Miramar&quot;,&quot;Modesto&quot;,&quot;Montgomery&quot;,&quot;Morristown&quot;,&quot;Murfreesboro&quot;,&quot;Muskogee&quot;,&quot;Oceanside&quot;,&quot;Oklahoma City&quot;,&quot;Olympia&quot;,&quot;Pembroke Pines&quot;,&quot;Peoria&quot;,&quot;Pharr&quot;,&quot;Pico Rivera&quot;,&quot;Pocatello&quot;,&quot;Pompano Beach&quot;,&quot;Provo&quot;,&quot;Raleigh&quot;,&quot;Redmond&quot;,&quot;Rockford&quot;,&quot;Rome&quot;,&quot;Round Rock&quot;,&quot;Saint Charles&quot;,&quot;Saint Cloud&quot;,&quot;Saint Petersburg&quot;,&quot;Sandy Springs&quot;,&quot;Sanford&quot;,&quot;Santa Ana&quot;,&quot;Sioux Falls&quot;,&quot;Spokane&quot;,&quot;Suffolk&quot;,&quot;Sunnyvale&quot;,&quot;Tallahassee&quot;,&quot;Thousand Oaks&quot;,&quot;Tigard&quot;,&quot;Trenton&quot;,&quot;Tucson&quot;,&quot;Tyler&quot;,&quot;Vancouver&quot;,&quot;Vineland&quot;,&quot;Virginia Beach&quot;,&quot;Waco&quot;,&quot;Washington&quot;,&quot;Westfield&quot;,&quot;Wheeling&quot;,&quot;Wilmington&quot;,&quot;Yonkers&quot;],&quot;yAxis&quot;:[48,36,32,32,26,24,13,12,11,8,8,6,6,6,6,6,5,5,5,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;City Count&quot;,&quot;chartTitle&quot;:&quot;City Count By City&quot;,&quot;xAxisLabel&quot;:&quot;City&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;count of city in furniture&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;:[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 511 values, 0 or 0% are zeroes and 511 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;count of city in furniture&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[20,27,33,46,51,49,56,40,82,69,38],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;City Count - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;city_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;count of city in furniture&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;60.7&quot;,&quot;20.1&quot;,&quot;19.2&quot;]},{&quot;recordCount&quot;:[1545,511,488]}],&quot;xAxis&quot;:[&quot;Office Supplies&quot;,&quot;Furniture&quot;,&quot;Technology&quot;],&quot;yAxis&quot;:[1545,511,488],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;City Count&quot;,&quot;chartTitle&quot;:&quot;City Count By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;count of city in furniture&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;value&quot;:&quot;city&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;city_count&quot;,&quot;resolutionValue&quot;:&quot;city_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[461,557,1355,434,511,485],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;City Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;city_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="range of sales in california" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="range of sales in california" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:120038.39,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Range Of Sales In California&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;31.40%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone up by 28687.29 or 31.40%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:231.73,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 231.73&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:518,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 518 rows, forming 3.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 518 values, 0 or 0% are zeroes and 518 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[4884.561972141266,6369.386945724487,11981.659892320633,8523.211895942688,10469.629966497421,6405.124459505081,12045.28402709961,17129.307949066162,19235.136097192764,14452.294958353043,8542.79396390915],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:120038.3921277523,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},72109.4864885807,56565.502069950104,34392.21361255646,33728.19640040398,22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[88259,134409,290055,91351,120038,208253],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;range of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;range&quot;,&quot;value&quot;:&quot;range&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[287,113,87,31]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[64690.22929811478,24494.26907634735,21817.345731973648,9036.548021316528],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales  for california in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales  for california in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:211389.49,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales  for california in 2018 and 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-44.58%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The sales has gone down by -170017.21 or -44.58%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:226.81,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 226.81&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:932,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 932 rows, forming 5.9% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: true,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [&#xd;
      {&#xd;
        &quot;type&quot;: &quot;dimension_value&quot;,&#xd;
        &quot;name&quot;: &quot;state&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;california&quot;,&#xd;
        &quot;value&quot;: &quot;california&quot;,&#xd;
        &quot;displayName&quot;: &quot;State&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;type&quot;: &quot;builtin.datetimeV2.daterange&quot;,&#xd;
        &quot;name&quot;: &quot;builtin.datetimeV2.daterange&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;2018-01-01,2018-12-31&quot;,&#xd;
        &quot;value&quot;: &quot;2018&quot;,&#xd;
        &quot;displayName&quot;: &quot;Ship Date&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;type&quot;: &quot;builtin.datetimeV2.daterange&quot;,&#xd;
        &quot;name&quot;: &quot;builtin.datetimeV2.daterange&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;2019-01-01,2019-12-31&quot;,&#xd;
        &quot;value&quot;: &quot;2019&quot;,&#xd;
        &quot;displayName&quot;: &quot;Ship Date&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;type&quot;: &quot;measure&quot;,&#xd;
        &quot;name&quot;: &quot;measure&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;sales&quot;,&#xd;
        &quot;value&quot;: &quot;sales&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;: &quot;${LOCALE}&quot;,&#xd;
  &quot;appName&quot;: &quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 932 values, 0 or 0% are zeroes and 932 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[91351.09853005409,120038.3921277523],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.1&quot;,&quot;12.9&quot;,&quot;8.2&quot;,&quot;8.0&quot;,&quot;5.3&quot;,&quot;5.1&quot;,&quot;3.4&quot;,&quot;3.0&quot;,&quot;3.0&quot;,&quot;2.7&quot;,&quot;2.6&quot;,&quot;2.2&quot;,&quot;2.0&quot;,&quot;1.9&quot;,&quot;1.6&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.3&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;0.9&quot;,&quot;0.8&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[932,452,269,469,187,268,251,105,211,111,92,87,52,70,65,102,86,66,48,52,46,35,28,30,37,60,29,43,21,26,33,10,26,16,21,23,14,11,12,16,11,11,4,9,4,3,12,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Virginia&quot;,&quot;Ohio&quot;,&quot;North Carolina&quot;,&quot;Michigan&quot;,&quot;Georgia&quot;,&quot;Minnesota&quot;,&quot;Kentucky&quot;,&quot;Indiana&quot;,&quot;Arizona&quot;,&quot;Tennessee&quot;,&quot;Colorado&quot;,&quot;Massachusetts&quot;,&quot;New Jersey&quot;,&quot;Maryland&quot;,&quot;Missouri&quot;,&quot;Oklahoma&quot;,&quot;Wisconsin&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;Arkansas&quot;,&quot;Connecticut&quot;,&quot;Alabama&quot;,&quot;Louisiana&quot;,&quot;Utah&quot;,&quot;Montana&quot;,&quot;Rhode Island&quot;,&quot;Nevada&quot;,&quot;Mississippi&quot;,&quot;New Mexico&quot;,&quot;South Carolina&quot;,&quot;Kansas&quot;,&quot;New Hampshire&quot;,&quot;Iowa&quot;,&quot;Idaho&quot;,&quot;South Dakota&quot;,&quot;West Virginia&quot;,&quot;North Dakota&quot;,&quot;Vermont&quot;,&quot;Maine&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:211389.4906578064,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},136123.27943229675,86627.99786818027,84258.62052637339,56367.441480755806,53834.66537237167,35699.55078303814,31450.919679880142,31374.761894226074,28839.16209614277,27351.539922714233,23352.31982731819,21239.71016550064,20310.859788417816,17275.31994175911,15872.023923873901,15552.458080172539,13279.294079780579,11956.719898700714,11822.500029802322,10037.31003689766,9917.84976196289,8854.45998954773,8084.580168247223,7885.103078842163,7670.610075592995,7652.909955501556,6537.579990386963,6244.259968042374,5658.000064134598,5404.325928688049,4653.767977237701,4087.696019887924,4029.7680473327637,3821.180013656616,3464.853976249695,3386.03000164032,2019.6499891281128,2013.9100170135498,1893.3999681472778,1677.4519863128662,1290.0600192546844,1209.8239917755127,948.2900114059448,637.1800003051758,617.119987487793,508.3099980354309,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[88259,134409,290055,91351,120038,208253],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend (Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales  for california in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[547,193,145,47]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[114296.4952340126,50326.45136809349,35567.68004012108,11198.864015579224],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sum of sales in california" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sum of sales in california" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sum Sales&quot;,&quot;value&quot;:120038.39,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sum Of Sales In California&quot;},{&quot;name&quot;:&quot;Change of Sum Sales&quot;,&quot;value&quot;:&quot;31.40%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sum Sales has gone up by 28687.29 or 31.40%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:231.73,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 231.73&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:518,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 518 rows, forming 3.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 518 values, 0 or 0% are zeroes and 518 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[4884.561972141266,6369.386945724487,11981.659892320633,8523.211895942688,10469.629966497421,6405.124459505081,12045.28402709961,17129.307949066162,19235.136097192764,14452.294958353043,8542.79396390915],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales_sum&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:120038.3921277523,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},72109.4864885807,56565.502069950104,34392.21361255646,33728.19640040398,22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales Sum&quot;,&quot;chartTitle&quot;:&quot;Sales Sum By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[88259,134409,290055,91351,120038,208253],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales_sum&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sum of sales in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sum&quot;,&quot;value&quot;:&quot;sum&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[287,113,87,31]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[64690.22929811478,24494.26907634735,21817.345731973648,9036.548021316528],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales Sum&quot;,&quot;chartTitle&quot;:&quot;Sales Sum By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="percentage of california by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="percentage of california by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;20.05%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 20.05%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:211389.49,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;california by sales in 2018 and 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-44.58%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -170017.21 or -44.58%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:226.81,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 226.81&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:932,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 932 rows, forming 5.9% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 932 values, 0 or 0% are zeroes and 932 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: true,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[91351.09853005409,120038.3921277523],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.1&quot;,&quot;12.9&quot;,&quot;8.2&quot;,&quot;8.0&quot;,&quot;5.3&quot;,&quot;5.1&quot;,&quot;3.4&quot;,&quot;3.0&quot;,&quot;3.0&quot;,&quot;2.7&quot;,&quot;2.6&quot;,&quot;2.2&quot;,&quot;2.0&quot;,&quot;1.9&quot;,&quot;1.6&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.3&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;0.9&quot;,&quot;0.8&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[932,452,269,469,187,268,251,105,211,111,92,87,52,70,65,102,86,66,48,52,46,35,28,30,37,60,29,43,21,26,33,10,26,16,21,23,14,11,12,16,11,11,4,9,4,3,12,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Virginia&quot;,&quot;Ohio&quot;,&quot;North Carolina&quot;,&quot;Michigan&quot;,&quot;Georgia&quot;,&quot;Minnesota&quot;,&quot;Kentucky&quot;,&quot;Indiana&quot;,&quot;Arizona&quot;,&quot;Tennessee&quot;,&quot;Colorado&quot;,&quot;Massachusetts&quot;,&quot;New Jersey&quot;,&quot;Maryland&quot;,&quot;Missouri&quot;,&quot;Oklahoma&quot;,&quot;Wisconsin&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;Arkansas&quot;,&quot;Connecticut&quot;,&quot;Alabama&quot;,&quot;Louisiana&quot;,&quot;Utah&quot;,&quot;Montana&quot;,&quot;Rhode Island&quot;,&quot;Nevada&quot;,&quot;Mississippi&quot;,&quot;New Mexico&quot;,&quot;South Carolina&quot;,&quot;Kansas&quot;,&quot;New Hampshire&quot;,&quot;Iowa&quot;,&quot;Idaho&quot;,&quot;South Dakota&quot;,&quot;West Virginia&quot;,&quot;North Dakota&quot;,&quot;Vermont&quot;,&quot;Maine&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:211389.4906578064,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},136123.27943229675,86627.99786818027,84258.62052637339,56367.441480755806,53834.66537237167,35699.55078303814,31450.919679880142,31374.761894226074,28839.16209614277,27351.539922714233,23352.31982731819,21239.71016550064,20310.859788417816,17275.31994175911,15872.023923873901,15552.458080172539,13279.294079780579,11956.719898700714,11822.500029802322,10037.31003689766,9917.84976196289,8854.45998954773,8084.580168247223,7885.103078842163,7670.610075592995,7652.909955501556,6537.579990386963,6244.259968042374,5658.000064134598,5404.325928688049,4653.767977237701,4087.696019887924,4029.7680473327637,3821.180013656616,3464.853976249695,3386.03000164032,2019.6499891281128,2013.9100170135498,1893.3999681472778,1677.4519863128662,1290.0600192546844,1209.8239917755127,948.2900114059448,637.1800003051758,617.119987487793,508.3099980354309,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[88259,134409,290055,91351,120038,208253],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of california by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[547,193,145,47]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[114296.4952340126,50326.45136809349,35567.68004012108,11198.864015579224],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="percentage of technology by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="percentage of technology by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;37.11%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 37.11%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:391223.23,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;technology by sales in 2018 and 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-45.27%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -323554.87 or -45.27%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:469.09,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 469.09&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:834,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 834 rows, forming 5.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 834 values, 0 or 0% are zeroes and 834 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[171414.52706170082,219808.7036870718],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;37.1&quot;,&quot;32.6&quot;,&quot;30.3&quot;]},{&quot;recordCount&quot;:[834,2789,945]}],&quot;xAxis&quot;:[&quot;Technology&quot;,&quot;Office Supplies&quot;,&quot;Furniture&quot;],&quot;yAxis&quot;:[391223.2307487726,343644.4846377969,319394.16108739376],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[164550,228556,543363,171414,219808,399296],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of technology by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;technology&quot;,&quot;value&quot;:&quot;technology&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[502,143,146,43]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;First Class&quot;,&quot;Second Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[228503.71668183804,75396.39646553993,57021.73366212845,30301.383939266205],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="percentage of furniture by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="percentage of furniture by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;30.30%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 30.30%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:319394.16,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;furniture by sales in 2018 and 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-45.46%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -266222.4 or -45.46%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:337.98,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 337.98&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:945,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 945 rows, forming 6.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 945 values, 0 or 0% are zeroes and 945 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[159257.57042622566,160136.5906611681],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;37.1&quot;,&quot;32.6&quot;,&quot;30.3&quot;]},{&quot;recordCount&quot;:[834,2789,945]}],&quot;xAxis&quot;:[&quot;Technology&quot;,&quot;Office Supplies&quot;,&quot;Furniture&quot;],&quot;yAxis&quot;:[391223.2307487726,343644.4846377969,319394.16108739376],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[174006,197763,426358,159257,160136,150605],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;percentage of furniture by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[527,206,170,42]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[165767.29245615005,83047.80091500282,56033.90473806858,14545.162978172302],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales percentage of furniture in california for 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales percentage of furniture in california for 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;6.24%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 6.24%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:65813.41,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;sales furniture in california for 2018 and 2019&quot;},{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-42.26%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales has gone down by -48172.54 or -42.26%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:316.41,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 316.41&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:208,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 208 rows, forming 1.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;},{&quot;displayName&quot;:&quot;ContributeFactor-Dimension&quot;,&quot;queryName&quot;:&quot;cfPrimaryDimensionQuery&quot;}]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 208 values, 0 or 0% are zeroes and 208 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trendLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrendLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2018-01-01T00:00:00.000&quot;,&quot;2019-01-01T00:00:00.000&quot;],&quot;yAxis&quot;:[33626.58276176453,32186.8263964653],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsightChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;7.4&quot;,&quot;6.4&quot;,&quot;6.2&quot;]},{&quot;recordCount&quot;:[551,173,208]}],&quot;xAxis&quot;:[&quot;Office Supplies&quot;,&quot;Technology&quot;,&quot;Furniture&quot;],&quot;yAxis&quot;:[77598.87978863716,67977.20171093941,65813.40915822983],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;},{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;6.2&quot;,&quot;3.6&quot;,&quot;2.7&quot;,&quot;2.5&quot;,&quot;1.5&quot;,&quot;1.2&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[208,92,91,65,59,59,44,23,44,22,11,11,19,6,19,12,9,13,16,13,9,5,4,9,8,14,6,7,8,5,3,4,3,5,2,4,1,2,3,3,2,1,1]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Texas&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Florida&quot;,&quot;Virginia&quot;,&quot;Ohio&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Massachusetts&quot;,&quot;Michigan&quot;,&quot;Wisconsin&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Oklahoma&quot;,&quot;Maryland&quot;,&quot;North Carolina&quot;,&quot;Georgia&quot;,&quot;Indiana&quot;,&quot;Alabama&quot;,&quot;Minnesota&quot;,&quot;Rhode Island&quot;,&quot;Oregon&quot;,&quot;Colorado&quot;,&quot;Arkansas&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Connecticut&quot;,&quot;Utah&quot;,&quot;South Carolina&quot;,&quot;Iowa&quot;,&quot;Nevada&quot;,&quot;Mississippi&quot;,&quot;Missouri&quot;,&quot;West Virginia&quot;,&quot;New Mexico&quot;,&quot;New Hampshire&quot;,&quot;Idaho&quot;,&quot;South Dakota&quot;,&quot;Kansas&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:65813.40915822983,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},38370.23386859894,28451.262461066246,26018.63810825348,15833.66078710556,13045.962970972061,12295.930943012238,11753.619996070862,11080.961939811707,7677.348007202148,7481.7799949646,6591.629941940308,5808.240023136139,5222.090148925781,4624.913948535919,4570.439907073975,4568.36999130249,4490.090034484863,4263.507982254028,3938.5599117279053,3796.3500578403473,3600.7800340652466,3355.6499633789062,3200.2960205078125,3131.3950548171997,2668.22895526886,2381.819974899292,2097.5100288391113,2047.2129907608032,1895.3499794006348,1391.4199409484863,1373.4499969482422,1234.2099723815918,1056.7719831466675,952.3800277709961,742.0700073242188,673.343994140625,587.2199745178223,489.6000061035156,415.3119888305664,324.90000915527344,40.560001373291016,37.68000030517578],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="foreCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForecastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[32825,49927,80359,33626,32186,57545],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContributingFactor-Dimension" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales percentage of furniture in california for 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;cfPrimaryDimensionQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;percentage&quot;,&quot;value&quot;:&quot;percentage&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;aggregateMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ContributeFactor-DimensionAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[]},{&quot;recordCount&quot;:[114,43,40,11]}],&quot;xAxis&quot;:[&quot;Standard Class&quot;,&quot;Second Class&quot;,&quot;First Class&quot;,&quot;Same Day&quot;],&quot;yAxis&quot;:[31569.547555446625,17256.931334495544,12794.27031993866,4192.659948348999],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Ship Mode&quot;,&quot;xAxisLabel&quot;:&quot;Ship Mode&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales by category" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales by category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;38.3&quot;,&quot;33.8&quot;,&quot;27.9&quot;]},{&quot;recordCount&quot;:[488,1545,511]}],&quot;xAxis&quot;:[&quot;Technology&quot;,&quot;Office Supplies&quot;,&quot;Furniture&quot;],&quot;yAxis&quot;:[219808.7036870718,193613.9961833954,160136.5906611681],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;Maximum sales is 13999.96&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;Minimum sales is 0.44&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;Average sales is 225.46&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="average of sales by city" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="average of sales by city" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;average of sales by city&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;average&quot;,&quot;value&quot;:&quot;average&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City Count&quot;,&quot;value&quot;:300,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;City has an unique count of 300 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[3,1,3,2,4,10,2,5,1,8,16,4,4,3,1,8,10,12,1,3,17,3,4,1,9,3,1,4,1,1,1,6,22,2,3,2,1,6,10,6,147,4,4,1,10,1,218,2,10,2,2,3,1,2,2,6,3,10,5,6,5,6,5,7,6,7,7,167,65,40,21,9,16,144,3,20,13,40,12,13,20,4,6,1,2,2,14,2,4,8,1,1,3,7,12,147,3,15,8,14,9,2,2,6,24,2,5,8,9,13,15,7,9,5,15,49,4,3,8,1,7,2,2,4,5,12,82,19,9,1,9,4,1,6,1,2,1,15,2,6,3,11,3,3,2,5,1,5,4,100,1,4,6,9,2,1,10,9,20,12,5,6,1,8,2,17,3,2,4,3,2,3,7,10,2,4,5,1,2,1,27,2,4,13,1,2,2,2,5,2,2,3,3,4,4,2,3,2,1,1,4,4,3,10,3,1,5,4,3,4,1,15,8,2,3,3,6,7,2,1,2,4,5,1,1,6,2,2,2,2,5,1,1,1,2,5,2,4,2,5,3,2,1,1,1,1,3,2,3,4,5,3,2,3,1,1,7,1,1,1,2,1,2,1,1,4,1,1,1,2,2,1,1,1,1,3,1,2,3,1,1,2,1,1,2,4,1,2,1,1,2,1,1,3,1,1,1,1,1,1]}],&quot;xAxis&quot;:[&quot;Sacramento&quot;,&quot;Independence&quot;,&quot;Bellingham&quot;,&quot;Huntington Beach&quot;,&quot;Great Falls&quot;,&quot;Burlington&quot;,&quot;Torrance&quot;,&quot;Roswell&quot;,&quot;Kissimmee&quot;,&quot;Henderson&quot;,&quot;Jackson&quot;,&quot;Plainfield&quot;,&quot;Tulsa&quot;,&quot;Denver&quot;,&quot;Yuma&quot;,&quot;Tallahassee&quot;,&quot;Atlanta&quot;,&quot;Indianapolis&quot;,&quot;La Porte&quot;,&quot;Watertown&quot;,&quot;Detroit&quot;,&quot;Anaheim&quot;,&quot;Greensboro&quot;,&quot;Lake Charles&quot;,&quot;Brentwood&quot;,&quot;Saint Cloud&quot;,&quot;Hesperia&quot;,&quot;Muskogee&quot;,&quot;Miramar&quot;,&quot;Kenosha&quot;,&quot;Des Plaines&quot;,&quot;Minneapolis&quot;,&quot;Columbia&quot;,&quot;Lakeland&quot;,&quot;Suffolk&quot;,&quot;Farmington&quot;,&quot;Round Rock&quot;,&quot;Mount Vernon&quot;,&quot;Concord&quot;,&quot;Santa Ana&quot;,&quot;Seattle&quot;,&quot;El Paso&quot;,&quot;Las Vegas&quot;,&quot;Manteca&quot;,&quot;Nashville&quot;,&quot;Scottsdale&quot;,&quot;New York City&quot;,&quot;Lake Forest&quot;,&quot;Inglewood&quot;,&quot;Lawton&quot;,&quot;Oak Park&quot;,&quot;Spokane&quot;,&quot;Wichita&quot;,&quot;Mansfield&quot;,&quot;Yonkers&quot;,&quot;Fort Worth&quot;,&quot;Pocatello&quot;,&quot;Memphis&quot;,&quot;Wheeling&quot;,&quot;Franklin&quot;,&quot;San Antonio&quot;,&quot;Monroe&quot;,&quot;Raleigh&quot;,&quot;Provo&quot;,&quot;Troy&quot;,&quot;Dublin&quot;,&quot;Tampa&quot;,&quot;Los Angeles&quot;,&quot;Columbus&quot;,&quot;Springfield&quot;,&quot;Lakewood&quot;,&quot;Lawrence&quot;,&quot;Westminster&quot;,&quot;Philadelphia&quot;,&quot;Milford&quot;,&quot;Aurora&quot;,&quot;Knoxville&quot;,&quot;Jacksonville&quot;,&quot;Long Beach&quot;,&quot;Lafayette&quot;,&quot;Louisville&quot;,&quot;Maple Grove&quot;,&quot;Oklahoma City&quot;,&quot;Sunnyvale&quot;,&quot;Pasco&quot;,&quot;Greenville&quot;,&quot;Charlotte&quot;,&quot;Pomona&quot;,&quot;Southaven&quot;,&quot;Tucson&quot;,&quot;Amarillo&quot;,&quot;Laguna Niguel&quot;,&quot;Morristown&quot;,&quot;Apple Valley&quot;,&quot;Fayetteville&quot;,&quot;San Francisco&quot;,&quot;Edmonds&quot;,&quot;Milwaukee&quot;,&quot;Albuquerque&quot;,&quot;Lancaster&quot;,&quot;Wilmington&quot;,&quot;La Mesa&quot;,&quot;Santa Barbara&quot;,&quot;Orlando&quot;,&quot;San Diego&quot;,&quot;Mission Viejo&quot;,&quot;Fargo&quot;,&quot;Everett&quot;,&quot;Florence&quot;,&quot;Fresno&quot;,&quot;Fairfield&quot;,&quot;Danville&quot;,&quot;Oakland&quot;,&quot;Manchester&quot;,&quot;Newark&quot;,&quot;Dallas&quot;,&quot;Virginia Beach&quot;,&quot;Pearland&quot;,&quot;Cranston&quot;,&quot;Lebanon&quot;,&quot;Sioux Falls&quot;,&quot;League City&quot;,&quot;Coral Springs&quot;,&quot;Newport News&quot;,&quot;Mesa&quot;,&quot;Miami&quot;,&quot;Houston&quot;,&quot;Phoenix&quot;,&quot;Kent&quot;,&quot;Bolingbrook&quot;,&quot;Akron&quot;,&quot;Auburn&quot;,&quot;Naperville&quot;,&quot;Gilbert&quot;,&quot;Commerce City&quot;,&quot;Rockford&quot;,&quot;Pico Rivera&quot;,&quot;Baltimore&quot;,&quot;Dearborn Heights&quot;,&quot;Fort Collins&quot;,&quot;Salt Lake City&quot;,&quot;San Jose&quot;,&quot;Hollywood&quot;,&quot;Rome&quot;,&quot;Lansing&quot;,&quot;Peoria&quot;,&quot;Rochester Hills&quot;,&quot;Costa Mesa&quot;,&quot;Hoover&quot;,&quot;Chicago&quot;,&quot;Citrus Heights&quot;,&quot;Clarksville&quot;,&quot;Chico&quot;,&quot;Huntsville&quot;,&quot;Saint Charles&quot;,&quot;Pharr&quot;,&quot;Pembroke Pines&quot;,&quot;Bakersfield&quot;,&quot;Austin&quot;,&quot;Pasadena&quot;,&quot;Waco&quot;,&quot;Mentor&quot;,&quot;Cedar Hill&quot;,&quot;Decatur&quot;,&quot;Sanford&quot;,&quot;Cleveland&quot;,&quot;Modesto&quot;,&quot;Pine Bluff&quot;,&quot;Overland Park&quot;,&quot;Warwick&quot;,&quot;Georgetown&quot;,&quot;Meridian&quot;,&quot;Portland&quot;,&quot;Salem&quot;,&quot;New Rochelle&quot;,&quot;Belleville&quot;,&quot;Waterbury&quot;,&quot;Lodi&quot;,&quot;Rancho Cucamonga&quot;,&quot;Melbourne&quot;,&quot;Richmond&quot;,&quot;Fort Lauderdale&quot;,&quot;Clinton&quot;,&quot;Arlington&quot;,&quot;Boise&quot;,&quot;Perth Amboy&quot;,&quot;Westfield&quot;,&quot;Elkhart&quot;,&quot;Cincinnati&quot;,&quot;Olympia&quot;,&quot;Coachella&quot;,&quot;Greenwood&quot;,&quot;Fremont&quot;,&quot;Middletown&quot;,&quot;Redmond&quot;,&quot;Laurel&quot;,&quot;Carlsbad&quot;,&quot;Draper&quot;,&quot;San Mateo&quot;,&quot;Corpus Christi&quot;,&quot;Tyler&quot;,&quot;Plano&quot;,&quot;Tigard&quot;,&quot;Sandy Springs&quot;,&quot;Little Rock&quot;,&quot;Moorhead&quot;,&quot;Trenton&quot;,&quot;Hialeah&quot;,&quot;Thousand Oaks&quot;,&quot;Meriden&quot;,&quot;Dearborn&quot;,&quot;Rochester&quot;,&quot;Marion&quot;,&quot;Jonesboro&quot;,&quot;Murray&quot;,&quot;Freeport&quot;,&quot;Des Moines&quot;,&quot;Quincy&quot;,&quot;Clovis&quot;,&quot;Salinas&quot;,&quot;York&quot;,&quot;Bedford&quot;,&quot;Chattanooga&quot;,&quot;Texarkana&quot;,&quot;Gulfport&quot;,&quot;Chester&quot;,&quot;Saint Louis&quot;,&quot;Bloomington&quot;,&quot;Woonsocket&quot;,&quot;Cambridge&quot;,&quot;Glendale&quot;,&quot;Las Cruces&quot;,&quot;Rogers&quot;,&quot;Helena&quot;,&quot;Harlingen&quot;,&quot;Providence&quot;,&quot;Washington&quot;,&quot;Vineland&quot;,&quot;Orange&quot;,&quot;Johnson City&quot;,&quot;Chandler&quot;,&quot;Roseville&quot;,&quot;Tuscaloosa&quot;,&quot;Garland&quot;,&quot;Frisco&quot;,&quot;Waterloo&quot;,&quot;Pompano Beach&quot;,&quot;Oceanside&quot;,&quot;Lakeville&quot;,&quot;Lowell&quot;,&quot;Boynton Beach&quot;,&quot;Lorain&quot;,&quot;Carrollton&quot;,&quot;Eagan&quot;,&quot;Palm Coast&quot;,&quot;Grand Prairie&quot;,&quot;Toledo&quot;,&quot;New Bedford&quot;,&quot;Harrisonburg&quot;,&quot;Green Bay&quot;,&quot;Omaha&quot;,&quot;Cuyahoga Falls&quot;,&quot;Parma&quot;,&quot;Deltona&quot;,&quot;Saint Petersburg&quot;,&quot;Bryan&quot;,&quot;Murfreesboro&quot;,&quot;Grand Island&quot;,&quot;Asheville&quot;,&quot;Greeley&quot;,&quot;Durham&quot;,&quot;Nashua&quot;,&quot;Camarillo&quot;,&quot;Port Saint Lucie&quot;,&quot;Chapel Hill&quot;,&quot;Coppell&quot;,&quot;Beaumont&quot;,&quot;Woodland&quot;,&quot;Smyrna&quot;,&quot;Orem&quot;,&quot;Norwich&quot;,&quot;Lubbock&quot;,&quot;Montgomery&quot;,&quot;Vancouver&quot;,&quot;Tempe&quot;,&quot;Skokie&quot;,&quot;Reading&quot;,&quot;Loveland&quot;,&quot;Hempstead&quot;,&quot;Riverside&quot;,&quot;New Brunswick&quot;,&quot;Missouri City&quot;,&quot;Keller&quot;,&quot;Mcallen&quot;,&quot;Mesquite&quot;,&quot;Hickory&quot;,&quot;Springdale&quot;,&quot;Woodstock&quot;,&quot;Ormond Beach&quot;,&quot;Brownsville&quot;],&quot;yAxis&quot;:[1775.2946542104085,1577.93994140625,1263.4133726755779,1247.9399795532227,1047.3449928760529,1047.0083972096443,1005.9499816894531,964.6699874877929,751.9840087890625,724.7987280488014,714.610942915082,684.4575139284134,652.8949956893921,609.4159940083822,599.9849853515625,582.413875579834,567.093989777565,530.0108302434286,526.4500122070312,516.7099914550781,503.9950528425329,490.11334204673767,480.7439844608307,477.510009765625,468.8051169713338,443.94000244140625,436.7040100097656,430.42500722408295,419.135986328125,399.95001220703125,383.8399963378906,383.2299968401591,381.02264018492264,364.82401275634766,355.2800016403198,352.9199905395508,341.9599914550781,341.60000864664715,337.95400404930115,337.44367599487305,337.11636729143106,330.6875011920929,318.02701330184937,314.54998779296875,313.43200340270994,307.7760009765625,303.7713875103434,298.9300003051758,298.65920128822324,291.03499603271484,290.42999267578125,285.1859944661458,279.8999938964844,279.43851470947266,279.4049916267395,277.09639487663907,271.5086669921875,267.22860435247424,266.27199897766116,265.5723249912262,262.96880583763124,257.98600188891095,254.77200031280518,254.58627659933907,251.495498975118,250.17656826972961,249.52150092806136,245.58577458872767,241.93610761715814,241.1216196000576,240.15780498867943,237.27444299062094,237.1673747897148,234.99976119067935,231.5566692352295,230.85299807786942,227.81538134354813,226.4880746603012,224.12699806690216,221.28461839602545,221.07660360336303,220.71749639511108,216.6266657511393,215.9759979248047,214.79599380493164,214.35199737548828,212.24736050197058,210.71000289916992,209.81249809265137,207.54899841547012,205.33279418945312,203.98300170898438,196.16666539510092,194.25729165758406,188.26517017682394,188.01090359039048,187.5506680806478,187.37333742777506,185.26724815368652,184.31778185708183,184.07122389475504,183.76499938964844,179.3000042438507,178.70233496030173,178.4093337059021,178.3249969482422,178.30600242614747,177.73874974250793,176.03110928005643,172.84938210707443,172.46706428527833,171.75056879861015,171.26866828070746,170.6439998626709,168.12560017903647,166.78650220559567,166.3600019812584,164.99866898854575,164.45874866843224,163.9600067138672,161.13000174931116,160.6009979248047,159.47999477386475,157.46500086784363,157.3247989654541,156.88133339087167,154.08080895935618,152.04189456136604,149.27755387624106,148.47999572753906,147.47778161366782,147.1849965453148,147.16799926757812,147.16499916712442,146.3520050048828,146.31000137329102,145.89999389648438,145.38533438046773,140.47999954223633,139.48733087380728,139.07200050354004,137.56390914050016,137.01666386922201,136.32000478108725,134.84000301361084,133.74879722595216,132.52000427246094,131.5691982269287,131.46249747276306,131.11903963685035,129.38999938964844,128.37399768829346,125.51866761843364,124.97666449016995,124.40999984741211,124.40399932861328,123.08759880065918,119.48866717020671,118.17920217514038,117.59433324138324,116.42784094810486,115.52166652679443,115.2959976196289,114.15099841356277,112.77299737930298,109.19070642134723,108.71666463216145,106.45499849319458,104.99000144004822,104.97333304087321,104.9399962425232,102.57999801635742,101.62428721359798,100.95319967269897,100.6309986114502,99.99249947071075,97.6519980430603,97.30000305175781,95.91000175476074,95.61599731445312,95.117778495506,94.30400276184082,91.28750085830688,91.16676928446843,89.97000122070312,89.10499858856201,88.09499549865723,85.71500015258789,85.45060014724731,84.6399998664856,81.77499961853027,80.05000178019206,79.56999969482422,79.39499986171722,77.05225086212158,76.29499816894531,76.09333483378093,75.85999870300293,75.18000030517578,74.35199737548828,74.00550132989883,71.7579996585846,68.58133602142334,67.30100059509277,66.3900016148885,63.959999084472656,63.386000633239746,63.382001876831055,63.35666433970133,62.190001249313354,60.84000015258789,59.89466702143351,59.304999470710754,58.81000089645386,56.90600140889486,56.85733222961426,56.703333377838135,56.251427684511455,55.70999813079834,54.895999908447266,51.739999771118164,51.323999881744385,51.299198389053345,48.900001525878906,48.689998626708984,48.53616635004679,47.83000087738037,47.07600021362305,45.56999969482422,45.30000019073486,42.44539909362793,41.369998931884766,40.40999984741211,39.900001525878906,39.67199993133545,39.30000038146973,38.880001068115234,38.35249996185303,37.92999839782715,35.01719989776611,34.03999900817871,33.94000053405762,33.7400016784668,30.384000778198242,30.336000442504883,30.31999969482422,30.14666763941447,30.03999948501587,29.173333803812664,28.75249993801117,27.92799949645996,26.435333490371704,25.610999703407288,25.3000005086263,24.447999954223633,23.68000030517578,23.51857171739851,23.18000030517578,23.079999923706055,22.719999313354492,21.809999465942383,18.527999877929688,18.176000118255615,17.856000900268555,17.08799934387207,16.459999680519104,15.991999626159668,15.960000038146973,15.920000076293945,15.175999641418457,15.168000221252441,14.819999694824219,14.729999542236328,14.336000442504883,14.015999794006348,13.365333557128906,12.767999649047852,12.33899974822998,12.190000216166178,11.680000305175781,10.359999656677246,10.306000232696533,10.15999984741211,9.640000343322754,9.5600004196167,9.015999794006348,8.855999946594238,8.376000165939331,7.980000019073486,7.800000190734863,7.384999990463257,6.369999885559082,6,5.9326668580373125,5.184000015258789,4.572000026702881,4.300000190734863,2.9119999408721924,2.808000087738037,1.74399995803833],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales &quot;,&quot;chartTitle&quot;:&quot;Sales  By City&quot;,&quot;xAxisLabel&quot;:&quot;City&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;average of sales by city&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;average&quot;,&quot;value&quot;:&quot;average&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;average of sales by city&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;average&quot;,&quot;value&quot;:&quot;average&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Sales Average&quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales in 2017 and 2019 by category" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales in 2017 and 2019 by category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019 by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:9117,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 9117 rows, forming 57.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;37.5&quot;,&quot;33.6&quot;,&quot;28.9&quot;]},{&quot;recordCount&quot;:[1734,5517,1866]}],&quot;xAxis&quot;:[&quot;Technology&quot;,&quot;Office Supplies&quot;,&quot;Furniture&quot;],&quot;yAxis&quot;:[763172.2779880762,682836.6984817982,586495.583155036],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019 by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 9117 values, 0 or 0% are zeroes and 9117 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales in 2017 and 2019 by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2017-01-01,2017-12-31&quot;,&quot;value&quot;:&quot;2017&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;222.94&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales by category in texas" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales by category in texas" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:242,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 242 rows, forming 1.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;2.3&quot;,&quot;2.0&quot;,&quot;1.6&quot;]},{&quot;recordCount&quot;:[38,40,164]}],&quot;xAxis&quot;:[&quot;Technology&quot;,&quot;Furniture&quot;,&quot;Office Supplies&quot;],&quot;yAxis&quot;:[12955.008117198944,11606.052327513695,9167.135955691338],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 242 values, 0 or 0% are zeroes and 242 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;2399.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;139.37&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[120038.3921277523,72109.4864885807,56565.502069950104,34392.21361255646,{&quot;value&quot;:33728.19640040398,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales by category and by sub category" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales by category and by sub category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category and by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;category,sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Sub Category Count&quot;,&quot;value&quot;:17,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sub category has an unique count of 17 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Breakdown of Sales by Category and by Sub category&quot;,&quot;chartType&quot;:&quot;treemap&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;sales&quot;,&quot;yAxisLabel&quot;:[],&quot;columnNames&quot;:[&quot;Technology&quot;,&quot;Furniture&quot;,&quot;Office Supplies&quot;],&quot;columnValues&quot;:[],&quot;treeMapValues&quot;:[{&quot;name&quot;:&quot;technology&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Phones&quot;,&quot;value&quot;:84437},{&quot;name&quot;:&quot;Accessories&quot;,&quot;value&quot;:51922},{&quot;name&quot;:&quot;Copiers&quot;,&quot;value&quot;:44820},{&quot;name&quot;:&quot;Machines&quot;,&quot;value&quot;:38630}]},{&quot;name&quot;:&quot;furniture&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Chairs&quot;,&quot;value&quot;:70323},{&quot;name&quot;:&quot;Tables&quot;,&quot;value&quot;:46412},{&quot;name&quot;:&quot;Bookcases&quot;,&quot;value&quot;:24247},{&quot;name&quot;:&quot;Furnishings&quot;,&quot;value&quot;:19154}]},{&quot;name&quot;:&quot;office supplies&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Binders&quot;,&quot;value&quot;:62748},{&quot;name&quot;:&quot;Storage&quot;,&quot;value&quot;:51186},{&quot;name&quot;:&quot;Appliances&quot;,&quot;value&quot;:31105},{&quot;name&quot;:&quot;Paper&quot;,&quot;value&quot;:21655},{&quot;name&quot;:&quot;Supplies&quot;,&quot;value&quot;:13416},{&quot;name&quot;:&quot;Art&quot;,&quot;value&quot;:6908},{&quot;name&quot;:&quot;Labels&quot;,&quot;value&quot;:3472},{&quot;name&quot;:&quot;Envelopes&quot;,&quot;value&quot;:2551},{&quot;name&quot;:&quot;Fasteners&quot;,&quot;value&quot;:573}]}]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category and by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;category,sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensions&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by category and by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;category,sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensions&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;Maximum sales is 13999.96&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;Minimum sales is 0.44&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;Average sales is 225.46&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales by state and category" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales by state and category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;State Count&quot;,&quot;value&quot;:47,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;State has an unique count of 47 values&quot;},{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Breakdown of Sales by State and by Category&quot;,&quot;chartType&quot;:&quot;treemap&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;sales&quot;,&quot;yAxisLabel&quot;:[],&quot;columnNames&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;North Carolina&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;Indiana&quot;,&quot;Georgia&quot;,&quot;Illinois&quot;,&quot;Missouri&quot;,&quot;Ohio&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Minnesota&quot;,&quot;Maryland&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Arizona&quot;,&quot;Oklahoma&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Virginia&quot;,&quot;Massachusetts&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;Utah&quot;,&quot;New Mexico&quot;,&quot;Rhode Island&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;North Dakota&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Idaho&quot;,&quot;Kansas&quot;,&quot;South Carolina&quot;,&quot;West Virginia&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;South Dakota&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;columnValues&quot;:[],&quot;treeMapValues&quot;:[{&quot;name&quot;:&quot;california&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:47403},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:40448},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:32187}]},{&quot;name&quot;:&quot;new york&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:17740},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:36778},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:17591}]},{&quot;name&quot;:&quot;washington&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:13080},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:28598},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:14888}]},{&quot;name&quot;:&quot;pennsylvania&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:12330},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:13080},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:8982}]},{&quot;name&quot;:&quot;texas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:9167},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:12955},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:11606}]},{&quot;name&quot;:&quot;north carolina&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:5892},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:11462},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2864}]},{&quot;name&quot;:&quot;florida&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3582},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:10282},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:8256}]},{&quot;name&quot;:&quot;michigan&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7984},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:8101},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:4684}]},{&quot;name&quot;:&quot;indiana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7991},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2801},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3128}]},{&quot;name&quot;:&quot;georgia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7316},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:7794},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3703}]},{&quot;name&quot;:&quot;illinois&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:4983},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:6945},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:7365}]},{&quot;name&quot;:&quot;missouri&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7361},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:638},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:348}]},{&quot;name&quot;:&quot;ohio&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:5223},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:6944},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:5373}]},{&quot;name&quot;:&quot;tennessee&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3721},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2987},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:5703}]},{&quot;name&quot;:&quot;kentucky&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3192},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3836},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1373}]},{&quot;name&quot;:&quot;minnesota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3815},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:812},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:874}]},{&quot;name&quot;:&quot;maryland&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3618},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1056},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3662}]},{&quot;name&quot;:&quot;new jersey&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3379},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1248},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3003}]},{&quot;name&quot;:&quot;colorado&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2508},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3317},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:946}]},{&quot;name&quot;:&quot;arizona&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1588},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3300},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3241}]},{&quot;name&quot;:&quot;oklahoma&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:924},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2194},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3097}]},{&quot;name&quot;:&quot;montana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1229},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3000}]},{&quot;name&quot;:&quot;connecticut&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2409},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:671},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:664}]},{&quot;name&quot;:&quot;virginia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2397},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1058},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2194}]},{&quot;name&quot;:&quot;massachusetts&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1177},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1286},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2355}]},{&quot;name&quot;:&quot;wisconsin&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:652},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:599},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1987}]},{&quot;name&quot;:&quot;louisiana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:518},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:689},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1916}]},{&quot;name&quot;:&quot;delaware&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1689},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:534},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:876}]},{&quot;name&quot;:&quot;oregon&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:457},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1037},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1369}]},{&quot;name&quot;:&quot;utah&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:944},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:198},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1318}]},{&quot;name&quot;:&quot;new mexico&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:770},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1212},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:587}]},{&quot;name&quot;:&quot;rhode island&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:472},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:322},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1124}]},{&quot;name&quot;:&quot;nevada&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:149},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1123},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:196}]},{&quot;name&quot;:&quot;arkansas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1066},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:284}]},{&quot;name&quot;:&quot;north dakota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:892}]},{&quot;name&quot;:&quot;mississippi&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:600},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:300},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:866}]},{&quot;name&quot;:&quot;new hampshire&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:335},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:825},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:350}]},{&quot;name&quot;:&quot;idaho&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:743},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:392},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:77}]},{&quot;name&quot;:&quot;kansas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:700}]},{&quot;name&quot;:&quot;south carolina&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:685},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:430}]},{&quot;name&quot;:&quot;west virginia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:536},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:673}]},{&quot;name&quot;:&quot;vermont&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:637}]},{&quot;name&quot;:&quot;alabama&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:591},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:26},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:10}]},{&quot;name&quot;:&quot;south dakota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:555},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:390},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:183}]},{&quot;name&quot;:&quot;iowa&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:357},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:207},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:49}]},{&quot;name&quot;:&quot;nebraska&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:218},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:80}]},{&quot;name&quot;:&quot;district of columbia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:40},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:38}]}]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensions&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensions&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;Maximum sales is 13999.96&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;Minimum sales is 0.44&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;Average sales is 225.46&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sales by state and category in new york" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sales by state and category in new york" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;State Count&quot;,&quot;value&quot;:1,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;State has an unique count of 1 values&quot;},{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:250,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 250 rows, forming 1.6% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Breakdown of Sales,state count by State and by Category&quot;,&quot;chartType&quot;:&quot;treemap&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;sales&quot;,&quot;yAxisLabel&quot;:[],&quot;columnNames&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;North Carolina&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;Indiana&quot;,&quot;Georgia&quot;,&quot;Illinois&quot;,&quot;Missouri&quot;,&quot;Ohio&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Minnesota&quot;,&quot;Maryland&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Arizona&quot;,&quot;Oklahoma&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Virginia&quot;,&quot;Massachusetts&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;Utah&quot;,&quot;New Mexico&quot;,&quot;Rhode Island&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;North Dakota&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Idaho&quot;,&quot;Kansas&quot;,&quot;South Carolina&quot;,&quot;West Virginia&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;South Dakota&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;columnValues&quot;:[],&quot;treeMapValues&quot;:[{&quot;name&quot;:&quot;california&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:47403},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:40448},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:32187}]},{&quot;name&quot;:&quot;new york&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:17740},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:36778},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:17591}]},{&quot;name&quot;:&quot;washington&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:13080},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:28598},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:14888}]},{&quot;name&quot;:&quot;pennsylvania&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:12330},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:13080},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:8982}]},{&quot;name&quot;:&quot;texas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:9167},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:12955},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:11606}]},{&quot;name&quot;:&quot;north carolina&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:5892},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:11462},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2864}]},{&quot;name&quot;:&quot;florida&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3582},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:10282},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:8256}]},{&quot;name&quot;:&quot;michigan&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7984},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:8101},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:4684}]},{&quot;name&quot;:&quot;indiana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7991},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2801},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3128}]},{&quot;name&quot;:&quot;georgia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7316},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:7794},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3703}]},{&quot;name&quot;:&quot;illinois&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:4983},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:6945},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:7365}]},{&quot;name&quot;:&quot;missouri&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:7361},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:638},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:348}]},{&quot;name&quot;:&quot;ohio&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:5223},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:6944},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:5373}]},{&quot;name&quot;:&quot;tennessee&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3721},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2987},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:5703}]},{&quot;name&quot;:&quot;kentucky&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3192},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3836},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1373}]},{&quot;name&quot;:&quot;minnesota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3815},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:812},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:874}]},{&quot;name&quot;:&quot;maryland&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3618},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1056},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3662}]},{&quot;name&quot;:&quot;new jersey&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:3379},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1248},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3003}]},{&quot;name&quot;:&quot;colorado&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2508},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3317},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:946}]},{&quot;name&quot;:&quot;arizona&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1588},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3300},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3241}]},{&quot;name&quot;:&quot;oklahoma&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:924},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:2194},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:3097}]},{&quot;name&quot;:&quot;montana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1229},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:3000}]},{&quot;name&quot;:&quot;connecticut&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2409},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:671},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:664}]},{&quot;name&quot;:&quot;virginia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:2397},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1058},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2194}]},{&quot;name&quot;:&quot;massachusetts&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1177},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1286},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:2355}]},{&quot;name&quot;:&quot;wisconsin&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:652},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:599},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1987}]},{&quot;name&quot;:&quot;louisiana&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:518},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:689},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1916}]},{&quot;name&quot;:&quot;delaware&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1689},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:534},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:876}]},{&quot;name&quot;:&quot;oregon&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:457},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1037},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1369}]},{&quot;name&quot;:&quot;utah&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:944},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:198},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1318}]},{&quot;name&quot;:&quot;new mexico&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:770},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1212},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:587}]},{&quot;name&quot;:&quot;rhode island&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:472},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:322},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:1124}]},{&quot;name&quot;:&quot;nevada&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:149},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:1123},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:196}]},{&quot;name&quot;:&quot;arkansas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:1066},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:284}]},{&quot;name&quot;:&quot;north dakota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:892}]},{&quot;name&quot;:&quot;mississippi&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:600},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:300},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:866}]},{&quot;name&quot;:&quot;new hampshire&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:335},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:825},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:350}]},{&quot;name&quot;:&quot;idaho&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:743},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:392},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:77}]},{&quot;name&quot;:&quot;kansas&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:700}]},{&quot;name&quot;:&quot;south carolina&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:685},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:430}]},{&quot;name&quot;:&quot;west virginia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:536},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:673}]},{&quot;name&quot;:&quot;vermont&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:637}]},{&quot;name&quot;:&quot;alabama&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:591},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:26},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:10}]},{&quot;name&quot;:&quot;south dakota&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:555},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:390},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:183}]},{&quot;name&quot;:&quot;iowa&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:357},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:207},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:49}]},{&quot;name&quot;:&quot;nebraska&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:218},{&quot;name&quot;:&quot;Technology&quot;,&quot;value&quot;:80}]},{&quot;name&quot;:&quot;district of columbia&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Office Supplies&quot;,&quot;value&quot;:40},{&quot;name&quot;:&quot;Furniture&quot;,&quot;value&quot;:38}]}]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensionsWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 250 values, 0 or 0% are zeroes and 250 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensionsWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;11199.97&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;3.05&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;288.44&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sales by state and category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;state,category&quot;,&quot;resolutionValue&quot;:&quot;state,category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByMultipleDimensionsWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[120038.3921277523,{&quot;value&quot;:72109.4864885807,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},56565.502069950104,34392.21361255646,33728.19640040398,22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="category by sub category" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="category by sub category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Sub Category Count&quot;,&quot;value&quot;:17,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sub Category has an unique count of 17 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Breakdown of Category count by Category and by Sub category&quot;,&quot;chartType&quot;:&quot;treemap&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;category_count&quot;,&quot;yAxisLabel&quot;:[],&quot;columnNames&quot;:[&quot;Office Supplies&quot;,&quot;Furniture&quot;,&quot;Technology&quot;],&quot;columnValues&quot;:[],&quot;treeMapValues&quot;:[{&quot;name&quot;:&quot;office supplies&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Binders&quot;,&quot;value&quot;:381},{&quot;name&quot;:&quot;Paper&quot;,&quot;value&quot;:361},{&quot;name&quot;:&quot;Art&quot;,&quot;value&quot;:216},{&quot;name&quot;:&quot;Storage&quot;,&quot;value&quot;:215},{&quot;name&quot;:&quot;Appliances&quot;,&quot;value&quot;:126},{&quot;name&quot;:&quot;Labels&quot;,&quot;value&quot;:97},{&quot;name&quot;:&quot;Envelopes&quot;,&quot;value&quot;:57},{&quot;name&quot;:&quot;Fasteners&quot;,&quot;value&quot;:46},{&quot;name&quot;:&quot;Supplies&quot;,&quot;value&quot;:46}]},{&quot;name&quot;:&quot;furniture&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Furnishings&quot;,&quot;value&quot;:229},{&quot;name&quot;:&quot;Chairs&quot;,&quot;value&quot;:142},{&quot;name&quot;:&quot;Tables&quot;,&quot;value&quot;:82},{&quot;name&quot;:&quot;Bookcases&quot;,&quot;value&quot;:58}]},{&quot;name&quot;:&quot;technology&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Phones&quot;,&quot;value&quot;:228},{&quot;name&quot;:&quot;Accessories&quot;,&quot;value&quot;:218},{&quot;name&quot;:&quot;Machines&quot;,&quot;value&quot;:26},{&quot;name&quot;:&quot;Copiers&quot;,&quot;value&quot;:16}]}]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownDimensionByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownDimensionByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="category by sub category in new york" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="category by sub category in new york" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category has an unique count of 3 values&quot;},{&quot;name&quot;:&quot;Sub Category Count&quot;,&quot;value&quot;:17,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sub Category has an unique count of 17 values&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:250,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 250 rows, forming 1.6% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Breakdown of Category count by Category and by Sub category&quot;,&quot;chartType&quot;:&quot;treemap&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;category_count&quot;,&quot;yAxisLabel&quot;:[],&quot;columnNames&quot;:[&quot;Office Supplies&quot;,&quot;Technology&quot;,&quot;Furniture&quot;],&quot;columnValues&quot;:[],&quot;treeMapValues&quot;:[{&quot;name&quot;:&quot;office supplies&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Paper&quot;,&quot;value&quot;:39},{&quot;name&quot;:&quot;Binders&quot;,&quot;value&quot;:29},{&quot;name&quot;:&quot;Art&quot;,&quot;value&quot;:19},{&quot;name&quot;:&quot;Storage&quot;,&quot;value&quot;:16},{&quot;name&quot;:&quot;Labels&quot;,&quot;value&quot;:14},{&quot;name&quot;:&quot;Envelopes&quot;,&quot;value&quot;:7},{&quot;name&quot;:&quot;Appliances&quot;,&quot;value&quot;:6},{&quot;name&quot;:&quot;Supplies&quot;,&quot;value&quot;:6},{&quot;name&quot;:&quot;Fasteners&quot;,&quot;value&quot;:3}]},{&quot;name&quot;:&quot;technology&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Phones&quot;,&quot;value&quot;:30},{&quot;name&quot;:&quot;Accessories&quot;,&quot;value&quot;:22},{&quot;name&quot;:&quot;Machines&quot;,&quot;value&quot;:4},{&quot;name&quot;:&quot;Copiers&quot;,&quot;value&quot;:1}]},{&quot;name&quot;:&quot;furniture&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Furnishings&quot;,&quot;value&quot;:24},{&quot;name&quot;:&quot;Chairs&quot;,&quot;value&quot;:21},{&quot;name&quot;:&quot;Bookcases&quot;,&quot;value&quot;:5},{&quot;name&quot;:&quot;Tables&quot;,&quot;value&quot;:4}]}]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownDimensionByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownDimensionByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category by sub category in new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;new york&quot;,&quot;value&quot;:&quot;new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;category_count&quot;,&quot;resolutionValue&quot;:&quot;category_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category,sub_category&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownDimensionByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="sub category with maximum sales" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sub category with maximum sales" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sub category with maximum sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;max&quot;,&quot;value&quot;:&quot;maximum&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;value&quot;:&quot;sub category&quot;},{&quot;name&quot;:&quot;sub_category&quot;,&quot;displayName&quot;:&quot;Sub-Category&quot;,&quot;value&quot;:&quot;phones&quot;,&quot;resolutionValue&quot;:&quot;phones&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sub-Category&quot;,&quot;value&quot;:&quot;Phones&quot;,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sub category with maximum sales&quot;},{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;14.72%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of sales is 14.72%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:84436.68,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:370.34,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 370.34&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:228,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 228 rows, forming 1.4% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;sub category with maximum sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;max&quot;,&quot;value&quot;:&quot;maximum&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sub_category&quot;,&quot;value&quot;:&quot;sub category&quot;},{&quot;name&quot;:&quot;sub_category&quot;,&quot;displayName&quot;:&quot;Sub-Category&quot;,&quot;value&quot;:&quot;phones&quot;,&quot;resolutionValue&quot;:&quot;phones&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithAction&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 228 values, 0 or 0% are zeroes and 228 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="category with minimum sales" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="category with minimum sales" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category with minimum sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;min&quot;,&quot;value&quot;:&quot;minimum&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;value&quot;:&quot;category&quot;},{&quot;name&quot;:&quot;category&quot;,&quot;displayName&quot;:&quot;Category&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Category&quot;,&quot;value&quot;:&quot;Furniture&quot;,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Category With Minimum Sales&quot;},{&quot;name&quot;:&quot;Minimum Sales&quot;,&quot;value&quot;:1.89,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Minimum Sales&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:511,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 511 rows, forming 3.2% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;category with minimum sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;min&quot;,&quot;value&quot;:&quot;minimum&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;value&quot;:&quot;category&quot;},{&quot;name&quot;:&quot;category&quot;,&quot;displayName&quot;:&quot;Category&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithAction&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 511 values, 0 or 0% are zeroes and 511 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="most popular city by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="most popular city by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;most popular city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;max&quot;,&quot;value&quot;:&quot;most popular&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;new york city&quot;,&quot;resolutionValue&quot;:&quot;new york city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City&quot;,&quot;value&quot;:&quot;New York City&quot;,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Most popular city by sales in 2018 and 2019&quot;},{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;10.56%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of sales is 10.56%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:111382.05,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sales&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:302.67,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 302.67&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:368,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 368 rows, forming 2.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;most popular city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;max&quot;,&quot;value&quot;:&quot;most popular&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;new york city&quot;,&quot;resolutionValue&quot;:&quot;new york city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithAction&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 368 values, 0 or 0% are zeroes and 368 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="top 3 city by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="top 3 city by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;top 3 city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_dimension&quot;,&quot;name&quot;:&quot;city&quot;,&quot;operator&quot;:&quot;top&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;Top City&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;new york city,seattle,los angeles&quot;,&quot;resolutionValue&quot;:&quot;new york city,seattle,los angeles&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;24.26%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Top 3 values form 24.26% of total Sales&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:255772.35,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sum of sales in the same time period&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:922,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 922 rows, forming 5.8% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;10.6&quot;,&quot;6.9&quot;,&quot;6.8&quot;]},{&quot;recordCount&quot;:[368,227,327]}],&quot;xAxis&quot;:[&quot;New York City&quot;,&quot;Seattle&quot;,&quot;Los Angeles&quot;],&quot;yAxis&quot;:[111382.04545354843,73102.89979612827,71287.40867972374],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Top 3 City By Sales&quot;,&quot;xAxisLabel&quot;:&quot;City&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;top 3 city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_dimension&quot;,&quot;name&quot;:&quot;city&quot;,&quot;operator&quot;:&quot;top&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;Top City&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;new york city,seattle,los angeles&quot;,&quot;resolutionValue&quot;:&quot;new york city,seattle,los angeles&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithOrder&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 922 values, 0 or 0% are zeroes and 922 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="bottom 3 city by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bottom 3 city by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;bottom 3 city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_dimension&quot;,&quot;name&quot;:&quot;city&quot;,&quot;operator&quot;:&quot;bottom&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;Least City&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;ormond beach,springdale,hickory&quot;,&quot;resolutionValue&quot;:&quot;ormond beach,springdale,hickory&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;0.00111%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 0.00111%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:11.68,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sum of sales in the same time period&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:3,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 3 rows, forming 0.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;0.0&quot;,&quot;0.0&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[1,1,1]}],&quot;xAxis&quot;:[&quot;Ormond Beach&quot;,&quot;Springdale&quot;,&quot;Hickory&quot;],&quot;yAxis&quot;:[2.808000087738037,4.300000190734863,4.572000026702881],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Bottom 3 City By Sales&quot;,&quot;xAxisLabel&quot;:&quot;City&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;bottom 3 city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_dimension&quot;,&quot;name&quot;:&quot;city&quot;,&quot;operator&quot;:&quot;bottom&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;Least City&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;ormond beach,springdale,hickory&quot;,&quot;resolutionValue&quot;:&quot;ormond beach,springdale,hickory&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithOrder&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 3 values, 0 or 0% are zeroes and 3 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="top 3 furniture sales in 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="top 3 furniture sales in 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;top 3 furniture sales in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_record_by_measure&quot;,&quot;name&quot;:&quot;top&quot;,&quot;operator&quot;:&quot;top&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;3&quot;,&quot;displayName&quot;:&quot;Top undefined&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;27.92%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Top 3 values form 27.92% of total Sales&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:160136.59,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sum of sales in the same time period&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:511,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 511 rows, forming 3.2% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;0.8&quot;,&quot;0.5&quot;,&quot;0.5&quot;]}],&quot;xAxis&quot;:[&quot;Sales #1&quot;,&quot;Sales #2&quot;,&quot;Sales #3&quot;],&quot;yAxis&quot;:[&quot;4416.17&quot;,&quot;2888.13&quot;,&quot;2803.92&quot;],&quot;chartTitle&quot;:&quot;Top 3 Sales&quot;,&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;top 3 furniture sales in 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;category&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;furniture&quot;,&quot;value&quot;:&quot;furniture&quot;,&quot;displayName&quot;:&quot;Category&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;order_record_by_measure&quot;,&quot;name&quot;:&quot;top&quot;,&quot;operator&quot;:&quot;top&quot;,&quot;resolutionValue&quot;:&quot;3&quot;,&quot;value&quot;:&quot;3&quot;,&quot;displayName&quot;:&quot;Top undefined&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilterOrder&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 511 values, 0 or 0% are zeroes and 511 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="least popular city by sales in 2018 and 2019" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="least popular city by sales in 2018 and 2019" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;least popular city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;min&quot;,&quot;value&quot;:&quot;least popular&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;ormond beach&quot;,&quot;resolutionValue&quot;:&quot;ormond beach&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;City&quot;,&quot;value&quot;:&quot;Ormond Beach&quot;,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Least Popular City By Sales In 2018 And 2019&quot;},{&quot;name&quot;:&quot;Minimum Sales&quot;,&quot;value&quot;:2.81,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Minimum Sales&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:1,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 1 rows, forming 0.0% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;least popular city by sales in 2018 and 2019&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;min&quot;,&quot;value&quot;:&quot;least popular&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2018-01-01,2018-12-31&quot;,&quot;value&quot;:&quot;2018&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;type&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;name&quot;:&quot;builtin.datetimeV2.daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019&quot;,&quot;displayName&quot;:&quot;Ship Date&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;sales&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;city&quot;,&quot;resolutionValue&quot;:&quot;city&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;},{&quot;name&quot;:&quot;city&quot;,&quot;displayName&quot;:&quot;City&quot;,&quot;value&quot;:&quot;ormond beach&quot;,&quot;resolutionValue&quot;:&quot;ormond beach&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;dimension_value&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithAction&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 1 values, 0 or 0% are zeroes and 1 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="trend of sales" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trend of sales" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;19.32%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales is trending up by 92856.7 or 19.32%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:225.46,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 225.46&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[39462.88658571243,23506.78231072426,52891.38480293751,40021.68022727966,44774.9321898222,47220.49793922901,47183.87308752537,63760.01971805096,91427.86670136452,75551.66107082367,47757.7058981657],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;13999.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;225.46&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasure&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[479442,611325,1458945,480702,573559,560551],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="trend of sales in texas" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trend of sales in texas" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Change of Sales&quot;,&quot;value&quot;:&quot;-33.25%&quot;,&quot;type&quot;:&quot;Change&quot;,&quot;description&quot;:&quot;The Sales is trending down by -16802.23 or -33.25%&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:139.37,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;The average of sales  is 139.37&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:242,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 242 rows, forming 1.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[3210.427969455719,1399.6024005413055,5836.315992116928,2487.3627499341965,3234.3223596811295,3775.5665870904922,2032.2860360145569,2694.480048418045,3555.8740060329437,4432.478255033493,1069.479996085167],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;Range&quot;,&quot;queryName&quot;:&quot;minMaxMeanMetricCountQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 242 values, 0 or 0% are zeroes and 242 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Range" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;minMaxMeanMetricCountQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="RangeAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Maximum Sales &quot;,&quot;value&quot;:&quot;2399.96&quot;,&quot;type&quot;:&quot;Maximum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Minimum Sales &quot;,&quot;value&quot;:&quot;0.44&quot;,&quot;type&quot;:&quot;Minimum&quot;,&quot;description&quot;:&quot;&quot;},{&quot;name&quot;:&quot;Average Sales &quot;,&quot;value&quot;:&quot;139.37&quot;,&quot;type&quot;:&quot;Average&quot;,&quot;description&quot;:&quot;&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[120038.3921277523,72109.4864885807,56565.502069950104,34392.21361255646,{&quot;value&quot;:33728.19640040398,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;trend of sales in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;trend&quot;,&quot;value&quot;:&quot;trend&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendMeasureWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[34933,41825,86320,50530,33728,86865],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Sales - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="daily count of ship mode" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="daily count of ship mode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-02T00:00:00.000&quot;,&quot;2019-01-04T00:00:00.000&quot;,&quot;2019-01-05T00:00:00.000&quot;,&quot;2019-01-06T00:00:00.000&quot;,&quot;2019-01-07T00:00:00.000&quot;,&quot;2019-01-08T00:00:00.000&quot;,&quot;2019-01-09T00:00:00.000&quot;,&quot;2019-01-10T00:00:00.000&quot;,&quot;2019-01-11T00:00:00.000&quot;,&quot;2019-01-13T00:00:00.000&quot;,&quot;2019-01-15T00:00:00.000&quot;,&quot;2019-01-16T00:00:00.000&quot;,&quot;2019-01-17T00:00:00.000&quot;,&quot;2019-01-18T00:00:00.000&quot;,&quot;2019-01-19T00:00:00.000&quot;,&quot;2019-01-20T00:00:00.000&quot;,&quot;2019-01-21T00:00:00.000&quot;,&quot;2019-01-23T00:00:00.000&quot;,&quot;2019-01-24T00:00:00.000&quot;,&quot;2019-01-25T00:00:00.000&quot;,&quot;2019-01-26T00:00:00.000&quot;,&quot;2019-01-27T00:00:00.000&quot;,&quot;2019-01-28T00:00:00.000&quot;,&quot;2019-01-29T00:00:00.000&quot;,&quot;2019-01-30T00:00:00.000&quot;,&quot;2019-01-31T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-02-02T00:00:00.000&quot;,&quot;2019-02-04T00:00:00.000&quot;,&quot;2019-02-05T00:00:00.000&quot;,&quot;2019-02-06T00:00:00.000&quot;,&quot;2019-02-07T00:00:00.000&quot;,&quot;2019-02-08T00:00:00.000&quot;,&quot;2019-02-09T00:00:00.000&quot;,&quot;2019-02-11T00:00:00.000&quot;,&quot;2019-02-12T00:00:00.000&quot;,&quot;2019-02-13T00:00:00.000&quot;,&quot;2019-02-14T00:00:00.000&quot;,&quot;2019-02-15T00:00:00.000&quot;,&quot;2019-02-17T00:00:00.000&quot;,&quot;2019-02-19T00:00:00.000&quot;,&quot;2019-02-20T00:00:00.000&quot;,&quot;2019-02-21T00:00:00.000&quot;,&quot;2019-02-22T00:00:00.000&quot;,&quot;2019-02-23T00:00:00.000&quot;,&quot;2019-02-25T00:00:00.000&quot;,&quot;2019-02-26T00:00:00.000&quot;,&quot;2019-02-27T00:00:00.000&quot;,&quot;2019-02-28T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-03-02T00:00:00.000&quot;,&quot;2019-03-03T00:00:00.000&quot;,&quot;2019-03-05T00:00:00.000&quot;,&quot;2019-03-06T00:00:00.000&quot;,&quot;2019-03-07T00:00:00.000&quot;,&quot;2019-03-08T00:00:00.000&quot;,&quot;2019-03-09T00:00:00.000&quot;,&quot;2019-03-10T00:00:00.000&quot;,&quot;2019-03-11T00:00:00.000&quot;,&quot;2019-03-12T00:00:00.000&quot;,&quot;2019-03-13T00:00:00.000&quot;,&quot;2019-03-14T00:00:00.000&quot;,&quot;2019-03-15T00:00:00.000&quot;,&quot;2019-03-16T00:00:00.000&quot;,&quot;2019-03-17T00:00:00.000&quot;,&quot;2019-03-18T00:00:00.000&quot;,&quot;2019-03-19T00:00:00.000&quot;,&quot;2019-03-20T00:00:00.000&quot;,&quot;2019-03-21T00:00:00.000&quot;,&quot;2019-03-22T00:00:00.000&quot;,&quot;2019-03-23T00:00:00.000&quot;,&quot;2019-03-24T00:00:00.000&quot;,&quot;2019-03-25T00:00:00.000&quot;,&quot;2019-03-26T00:00:00.000&quot;,&quot;2019-03-27T00:00:00.000&quot;,&quot;2019-03-28T00:00:00.000&quot;,&quot;2019-03-29T00:00:00.000&quot;,&quot;2019-03-30T00:00:00.000&quot;,&quot;2019-03-31T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-04-02T00:00:00.000&quot;,&quot;2019-04-03T00:00:00.000&quot;,&quot;2019-04-04T00:00:00.000&quot;,&quot;2019-04-05T00:00:00.000&quot;,&quot;2019-04-06T00:00:00.000&quot;,&quot;2019-04-07T00:00:00.000&quot;,&quot;2019-04-08T00:00:00.000&quot;,&quot;2019-04-10T00:00:00.000&quot;,&quot;2019-04-11T00:00:00.000&quot;,&quot;2019-04-12T00:00:00.000&quot;,&quot;2019-04-14T00:00:00.000&quot;,&quot;2019-04-15T00:00:00.000&quot;,&quot;2019-04-16T00:00:00.000&quot;,&quot;2019-04-17T00:00:00.000&quot;,&quot;2019-04-18T00:00:00.000&quot;,&quot;2019-04-19T00:00:00.000&quot;,&quot;2019-04-20T00:00:00.000&quot;,&quot;2019-04-21T00:00:00.000&quot;,&quot;2019-04-22T00:00:00.000&quot;,&quot;2019-04-23T00:00:00.000&quot;,&quot;2019-04-24T00:00:00.000&quot;,&quot;2019-04-25T00:00:00.000&quot;,&quot;2019-04-26T00:00:00.000&quot;,&quot;2019-04-27T00:00:00.000&quot;,&quot;2019-04-28T00:00:00.000&quot;,&quot;2019-04-29T00:00:00.000&quot;,&quot;2019-04-30T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-05-02T00:00:00.000&quot;,&quot;2019-05-04T00:00:00.000&quot;,&quot;2019-05-05T00:00:00.000&quot;,&quot;2019-05-06T00:00:00.000&quot;,&quot;2019-05-07T00:00:00.000&quot;,&quot;2019-05-08T00:00:00.000&quot;,&quot;2019-05-09T00:00:00.000&quot;,&quot;2019-05-10T00:00:00.000&quot;,&quot;2019-05-11T00:00:00.000&quot;,&quot;2019-05-12T00:00:00.000&quot;,&quot;2019-05-13T00:00:00.000&quot;,&quot;2019-05-14T00:00:00.000&quot;,&quot;2019-05-15T00:00:00.000&quot;,&quot;2019-05-16T00:00:00.000&quot;,&quot;2019-05-17T00:00:00.000&quot;,&quot;2019-05-18T00:00:00.000&quot;,&quot;2019-05-19T00:00:00.000&quot;,&quot;2019-05-20T00:00:00.000&quot;,&quot;2019-05-21T00:00:00.000&quot;,&quot;2019-05-22T00:00:00.000&quot;,&quot;2019-05-23T00:00:00.000&quot;,&quot;2019-05-24T00:00:00.000&quot;,&quot;2019-05-25T00:00:00.000&quot;,&quot;2019-05-26T00:00:00.000&quot;,&quot;2019-05-27T00:00:00.000&quot;,&quot;2019-05-29T00:00:00.000&quot;,&quot;2019-05-30T00:00:00.000&quot;,&quot;2019-05-31T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-06-02T00:00:00.000&quot;,&quot;2019-06-03T00:00:00.000&quot;,&quot;2019-06-04T00:00:00.000&quot;,&quot;2019-06-05T00:00:00.000&quot;,&quot;2019-06-06T00:00:00.000&quot;,&quot;2019-06-07T00:00:00.000&quot;,&quot;2019-06-08T00:00:00.000&quot;,&quot;2019-06-09T00:00:00.000&quot;,&quot;2019-06-10T00:00:00.000&quot;,&quot;2019-06-11T00:00:00.000&quot;,&quot;2019-06-12T00:00:00.000&quot;,&quot;2019-06-13T00:00:00.000&quot;,&quot;2019-06-14T00:00:00.000&quot;,&quot;2019-06-15T00:00:00.000&quot;,&quot;2019-06-16T00:00:00.000&quot;,&quot;2019-06-17T00:00:00.000&quot;,&quot;2019-06-18T00:00:00.000&quot;,&quot;2019-06-19T00:00:00.000&quot;,&quot;2019-06-20T00:00:00.000&quot;,&quot;2019-06-21T00:00:00.000&quot;,&quot;2019-06-22T00:00:00.000&quot;,&quot;2019-06-23T00:00:00.000&quot;,&quot;2019-06-25T00:00:00.000&quot;,&quot;2019-06-26T00:00:00.000&quot;,&quot;2019-06-27T00:00:00.000&quot;,&quot;2019-06-28T00:00:00.000&quot;,&quot;2019-06-29T00:00:00.000&quot;,&quot;2019-06-30T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-07-02T00:00:00.000&quot;,&quot;2019-07-03T00:00:00.000&quot;,&quot;2019-07-04T00:00:00.000&quot;,&quot;2019-07-05T00:00:00.000&quot;,&quot;2019-07-06T00:00:00.000&quot;,&quot;2019-07-07T00:00:00.000&quot;,&quot;2019-07-08T00:00:00.000&quot;,&quot;2019-07-09T00:00:00.000&quot;,&quot;2019-07-10T00:00:00.000&quot;,&quot;2019-07-11T00:00:00.000&quot;,&quot;2019-07-12T00:00:00.000&quot;,&quot;2019-07-13T00:00:00.000&quot;,&quot;2019-07-14T00:00:00.000&quot;,&quot;2019-07-15T00:00:00.000&quot;,&quot;2019-07-16T00:00:00.000&quot;,&quot;2019-07-17T00:00:00.000&quot;,&quot;2019-07-18T00:00:00.000&quot;,&quot;2019-07-19T00:00:00.000&quot;,&quot;2019-07-21T00:00:00.000&quot;,&quot;2019-07-22T00:00:00.000&quot;,&quot;2019-07-23T00:00:00.000&quot;,&quot;2019-07-24T00:00:00.000&quot;,&quot;2019-07-25T00:00:00.000&quot;,&quot;2019-07-26T00:00:00.000&quot;,&quot;2019-07-27T00:00:00.000&quot;,&quot;2019-07-28T00:00:00.000&quot;,&quot;2019-07-29T00:00:00.000&quot;,&quot;2019-07-30T00:00:00.000&quot;,&quot;2019-07-31T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-08-02T00:00:00.000&quot;,&quot;2019-08-03T00:00:00.000&quot;,&quot;2019-08-04T00:00:00.000&quot;,&quot;2019-08-05T00:00:00.000&quot;,&quot;2019-08-06T00:00:00.000&quot;,&quot;2019-08-07T00:00:00.000&quot;,&quot;2019-08-08T00:00:00.000&quot;,&quot;2019-08-09T00:00:00.000&quot;,&quot;2019-08-10T00:00:00.000&quot;,&quot;2019-08-11T00:00:00.000&quot;,&quot;2019-08-12T00:00:00.000&quot;,&quot;2019-08-13T00:00:00.000&quot;,&quot;2019-08-15T00:00:00.000&quot;,&quot;2019-08-16T00:00:00.000&quot;,&quot;2019-08-17T00:00:00.000&quot;,&quot;2019-08-18T00:00:00.000&quot;,&quot;2019-08-19T00:00:00.000&quot;,&quot;2019-08-20T00:00:00.000&quot;,&quot;2019-08-21T00:00:00.000&quot;,&quot;2019-08-22T00:00:00.000&quot;,&quot;2019-08-23T00:00:00.000&quot;,&quot;2019-08-24T00:00:00.000&quot;,&quot;2019-08-25T00:00:00.000&quot;,&quot;2019-08-26T00:00:00.000&quot;,&quot;2019-08-27T00:00:00.000&quot;,&quot;2019-08-28T00:00:00.000&quot;,&quot;2019-08-29T00:00:00.000&quot;,&quot;2019-08-30T00:00:00.000&quot;,&quot;2019-08-31T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-09-02T00:00:00.000&quot;,&quot;2019-09-03T00:00:00.000&quot;,&quot;2019-09-04T00:00:00.000&quot;,&quot;2019-09-05T00:00:00.000&quot;,&quot;2019-09-06T00:00:00.000&quot;,&quot;2019-09-07T00:00:00.000&quot;,&quot;2019-09-08T00:00:00.000&quot;,&quot;2019-09-09T00:00:00.000&quot;,&quot;2019-09-10T00:00:00.000&quot;,&quot;2019-09-11T00:00:00.000&quot;,&quot;2019-09-12T00:00:00.000&quot;,&quot;2019-09-13T00:00:00.000&quot;,&quot;2019-09-14T00:00:00.000&quot;,&quot;2019-09-15T00:00:00.000&quot;,&quot;2019-09-16T00:00:00.000&quot;,&quot;2019-09-17T00:00:00.000&quot;,&quot;2019-09-18T00:00:00.000&quot;,&quot;2019-09-19T00:00:00.000&quot;,&quot;2019-09-20T00:00:00.000&quot;,&quot;2019-09-21T00:00:00.000&quot;,&quot;2019-09-22T00:00:00.000&quot;,&quot;2019-09-23T00:00:00.000&quot;,&quot;2019-09-24T00:00:00.000&quot;,&quot;2019-09-25T00:00:00.000&quot;,&quot;2019-09-26T00:00:00.000&quot;,&quot;2019-09-27T00:00:00.000&quot;,&quot;2019-09-28T00:00:00.000&quot;,&quot;2019-09-29T00:00:00.000&quot;,&quot;2019-09-30T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-10-02T00:00:00.000&quot;,&quot;2019-10-03T00:00:00.000&quot;,&quot;2019-10-04T00:00:00.000&quot;,&quot;2019-10-05T00:00:00.000&quot;,&quot;2019-10-06T00:00:00.000&quot;,&quot;2019-10-07T00:00:00.000&quot;,&quot;2019-10-08T00:00:00.000&quot;,&quot;2019-10-09T00:00:00.000&quot;,&quot;2019-10-10T00:00:00.000&quot;,&quot;2019-10-11T00:00:00.000&quot;,&quot;2019-10-12T00:00:00.000&quot;,&quot;2019-10-13T00:00:00.000&quot;,&quot;2019-10-14T00:00:00.000&quot;,&quot;2019-10-15T00:00:00.000&quot;,&quot;2019-10-16T00:00:00.000&quot;,&quot;2019-10-17T00:00:00.000&quot;,&quot;2019-10-18T00:00:00.000&quot;,&quot;2019-10-19T00:00:00.000&quot;,&quot;2019-10-20T00:00:00.000&quot;,&quot;2019-10-21T00:00:00.000&quot;,&quot;2019-10-22T00:00:00.000&quot;,&quot;2019-10-23T00:00:00.000&quot;,&quot;2019-10-24T00:00:00.000&quot;,&quot;2019-10-25T00:00:00.000&quot;,&quot;2019-10-26T00:00:00.000&quot;,&quot;2019-10-27T00:00:00.000&quot;,&quot;2019-10-28T00:00:00.000&quot;,&quot;2019-10-29T00:00:00.000&quot;,&quot;2019-10-30T00:00:00.000&quot;,&quot;2019-10-31T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;,&quot;2019-11-02T00:00:00.000&quot;,&quot;2019-11-03T00:00:00.000&quot;,&quot;2019-11-04T00:00:00.000&quot;,&quot;2019-11-05T00:00:00.000&quot;,&quot;2019-11-06T00:00:00.000&quot;,&quot;2019-11-07T00:00:00.000&quot;,&quot;2019-11-08T00:00:00.000&quot;,&quot;2019-11-09T00:00:00.000&quot;,&quot;2019-11-10T00:00:00.000&quot;,&quot;2019-11-11T00:00:00.000&quot;,&quot;2019-11-12T00:00:00.000&quot;,&quot;2019-11-13T00:00:00.000&quot;,&quot;2019-11-14T00:00:00.000&quot;,&quot;2019-11-15T00:00:00.000&quot;,&quot;2019-11-16T00:00:00.000&quot;,&quot;2019-11-17T00:00:00.000&quot;],&quot;yAxis&quot;:[1,8,8,1,2,1,4,1,1,3,2,6,2,18,3,8,1,6,4,12,4,12,4,3,6,11,3,5,1,10,7,10,6,4,1,2,5,8,1,2,6,10,12,2,5,3,1,6,8,3,5,3,9,6,1,13,3,8,4,5,10,5,10,11,7,9,1,5,7,20,10,6,13,6,8,4,9,9,15,5,14,5,9,10,1,4,1,4,11,11,10,11,2,8,7,4,5,5,10,12,8,7,9,13,1,7,3,4,10,5,14,15,3,12,8,7,16,8,1,6,7,2,17,15,9,8,5,11,12,9,8,10,4,8,2,7,6,8,17,9,5,4,6,4,4,20,1,6,17,9,5,4,2,9,10,15,15,1,11,7,10,10,5,6,17,7,8,7,11,4,9,4,4,11,8,3,15,3,5,10,2,8,22,6,4,1,12,5,18,8,12,8,1,1,5,14,3,11,7,5,3,5,8,3,3,11,9,11,6,5,1,8,9,3,4,16,12,14,13,8,8,7,12,6,1,14,3,5,8,10,30,14,27,12,12,21,10,22,13,30,7,16,8,17,8,14,17,13,12,20,34,10,20,21,4,12,13,5,4,16,14,5,17,5,10,21,6,1,18,4,12,7,6,9,10,7,7,5,21,9,8,7,14,6,11,5,11,9,9,15,22,18,16,10,15,14,16,14,11,4,1,3,3],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Daily Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Ship Mode - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 2544 values, 0 or 0% are zeroes and 2544 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="daily count of ship mode in california" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="daily count of ship mode in california" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;},{&quot;name&quot;:&quot;measure&quot;,&quot;value&quot;:&quot;ship mode_count&quot;,&quot;resolutionValue&quot;:&quot;ship_mode_count&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;measure&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:518,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 518 rows, forming 3.3% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-04T00:00:00.000&quot;,&quot;2019-01-05T00:00:00.000&quot;,&quot;2019-01-07T00:00:00.000&quot;,&quot;2019-01-08T00:00:00.000&quot;,&quot;2019-01-09T00:00:00.000&quot;,&quot;2019-01-16T00:00:00.000&quot;,&quot;2019-01-19T00:00:00.000&quot;,&quot;2019-01-25T00:00:00.000&quot;,&quot;2019-01-26T00:00:00.000&quot;,&quot;2019-01-29T00:00:00.000&quot;,&quot;2019-01-30T00:00:00.000&quot;,&quot;2019-01-31T00:00:00.000&quot;,&quot;2019-02-02T00:00:00.000&quot;,&quot;2019-02-06T00:00:00.000&quot;,&quot;2019-02-07T00:00:00.000&quot;,&quot;2019-02-09T00:00:00.000&quot;,&quot;2019-02-13T00:00:00.000&quot;,&quot;2019-02-14T00:00:00.000&quot;,&quot;2019-02-20T00:00:00.000&quot;,&quot;2019-02-21T00:00:00.000&quot;,&quot;2019-02-23T00:00:00.000&quot;,&quot;2019-02-28T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-03-02T00:00:00.000&quot;,&quot;2019-03-03T00:00:00.000&quot;,&quot;2019-03-08T00:00:00.000&quot;,&quot;2019-03-09T00:00:00.000&quot;,&quot;2019-03-10T00:00:00.000&quot;,&quot;2019-03-13T00:00:00.000&quot;,&quot;2019-03-15T00:00:00.000&quot;,&quot;2019-03-17T00:00:00.000&quot;,&quot;2019-03-19T00:00:00.000&quot;,&quot;2019-03-20T00:00:00.000&quot;,&quot;2019-03-21T00:00:00.000&quot;,&quot;2019-03-22T00:00:00.000&quot;,&quot;2019-03-23T00:00:00.000&quot;,&quot;2019-03-24T00:00:00.000&quot;,&quot;2019-03-25T00:00:00.000&quot;,&quot;2019-03-26T00:00:00.000&quot;,&quot;2019-03-30T00:00:00.000&quot;,&quot;2019-03-31T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-04-03T00:00:00.000&quot;,&quot;2019-04-05T00:00:00.000&quot;,&quot;2019-04-07T00:00:00.000&quot;,&quot;2019-04-12T00:00:00.000&quot;,&quot;2019-04-17T00:00:00.000&quot;,&quot;2019-04-18T00:00:00.000&quot;,&quot;2019-04-20T00:00:00.000&quot;,&quot;2019-04-22T00:00:00.000&quot;,&quot;2019-04-24T00:00:00.000&quot;,&quot;2019-04-25T00:00:00.000&quot;,&quot;2019-04-27T00:00:00.000&quot;,&quot;2019-04-28T00:00:00.000&quot;,&quot;2019-04-29T00:00:00.000&quot;,&quot;2019-05-02T00:00:00.000&quot;,&quot;2019-05-04T00:00:00.000&quot;,&quot;2019-05-05T00:00:00.000&quot;,&quot;2019-05-06T00:00:00.000&quot;,&quot;2019-05-07T00:00:00.000&quot;,&quot;2019-05-08T00:00:00.000&quot;,&quot;2019-05-09T00:00:00.000&quot;,&quot;2019-05-11T00:00:00.000&quot;,&quot;2019-05-12T00:00:00.000&quot;,&quot;2019-05-14T00:00:00.000&quot;,&quot;2019-05-18T00:00:00.000&quot;,&quot;2019-05-20T00:00:00.000&quot;,&quot;2019-05-21T00:00:00.000&quot;,&quot;2019-05-24T00:00:00.000&quot;,&quot;2019-05-25T00:00:00.000&quot;,&quot;2019-05-26T00:00:00.000&quot;,&quot;2019-05-29T00:00:00.000&quot;,&quot;2019-05-31T00:00:00.000&quot;,&quot;2019-06-03T00:00:00.000&quot;,&quot;2019-06-04T00:00:00.000&quot;,&quot;2019-06-07T00:00:00.000&quot;,&quot;2019-06-10T00:00:00.000&quot;,&quot;2019-06-11T00:00:00.000&quot;,&quot;2019-06-13T00:00:00.000&quot;,&quot;2019-06-14T00:00:00.000&quot;,&quot;2019-06-19T00:00:00.000&quot;,&quot;2019-06-20T00:00:00.000&quot;,&quot;2019-06-23T00:00:00.000&quot;,&quot;2019-06-26T00:00:00.000&quot;,&quot;2019-06-28T00:00:00.000&quot;,&quot;2019-06-30T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-07-02T00:00:00.000&quot;,&quot;2019-07-03T00:00:00.000&quot;,&quot;2019-07-05T00:00:00.000&quot;,&quot;2019-07-06T00:00:00.000&quot;,&quot;2019-07-08T00:00:00.000&quot;,&quot;2019-07-10T00:00:00.000&quot;,&quot;2019-07-11T00:00:00.000&quot;,&quot;2019-07-15T00:00:00.000&quot;,&quot;2019-07-16T00:00:00.000&quot;,&quot;2019-07-18T00:00:00.000&quot;,&quot;2019-07-19T00:00:00.000&quot;,&quot;2019-07-21T00:00:00.000&quot;,&quot;2019-07-24T00:00:00.000&quot;,&quot;2019-07-25T00:00:00.000&quot;,&quot;2019-07-26T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-08-03T00:00:00.000&quot;,&quot;2019-08-04T00:00:00.000&quot;,&quot;2019-08-05T00:00:00.000&quot;,&quot;2019-08-06T00:00:00.000&quot;,&quot;2019-08-08T00:00:00.000&quot;,&quot;2019-08-11T00:00:00.000&quot;,&quot;2019-08-12T00:00:00.000&quot;,&quot;2019-08-13T00:00:00.000&quot;,&quot;2019-08-15T00:00:00.000&quot;,&quot;2019-08-16T00:00:00.000&quot;,&quot;2019-08-20T00:00:00.000&quot;,&quot;2019-08-21T00:00:00.000&quot;,&quot;2019-08-22T00:00:00.000&quot;,&quot;2019-08-23T00:00:00.000&quot;,&quot;2019-08-24T00:00:00.000&quot;,&quot;2019-08-25T00:00:00.000&quot;,&quot;2019-08-27T00:00:00.000&quot;,&quot;2019-08-29T00:00:00.000&quot;,&quot;2019-09-04T00:00:00.000&quot;,&quot;2019-09-05T00:00:00.000&quot;,&quot;2019-09-06T00:00:00.000&quot;,&quot;2019-09-07T00:00:00.000&quot;,&quot;2019-09-08T00:00:00.000&quot;,&quot;2019-09-10T00:00:00.000&quot;,&quot;2019-09-11T00:00:00.000&quot;,&quot;2019-09-12T00:00:00.000&quot;,&quot;2019-09-13T00:00:00.000&quot;,&quot;2019-09-14T00:00:00.000&quot;,&quot;2019-09-15T00:00:00.000&quot;,&quot;2019-09-17T00:00:00.000&quot;,&quot;2019-09-18T00:00:00.000&quot;,&quot;2019-09-19T00:00:00.000&quot;,&quot;2019-09-20T00:00:00.000&quot;,&quot;2019-09-21T00:00:00.000&quot;,&quot;2019-09-23T00:00:00.000&quot;,&quot;2019-09-24T00:00:00.000&quot;,&quot;2019-09-25T00:00:00.000&quot;,&quot;2019-09-26T00:00:00.000&quot;,&quot;2019-09-28T00:00:00.000&quot;,&quot;2019-09-29T00:00:00.000&quot;,&quot;2019-09-30T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-10-02T00:00:00.000&quot;,&quot;2019-10-04T00:00:00.000&quot;,&quot;2019-10-06T00:00:00.000&quot;,&quot;2019-10-08T00:00:00.000&quot;,&quot;2019-10-10T00:00:00.000&quot;,&quot;2019-10-11T00:00:00.000&quot;,&quot;2019-10-13T00:00:00.000&quot;,&quot;2019-10-14T00:00:00.000&quot;,&quot;2019-10-17T00:00:00.000&quot;,&quot;2019-10-18T00:00:00.000&quot;,&quot;2019-10-19T00:00:00.000&quot;,&quot;2019-10-20T00:00:00.000&quot;,&quot;2019-10-22T00:00:00.000&quot;,&quot;2019-10-23T00:00:00.000&quot;,&quot;2019-10-24T00:00:00.000&quot;,&quot;2019-10-28T00:00:00.000&quot;,&quot;2019-10-29T00:00:00.000&quot;,&quot;2019-11-04T00:00:00.000&quot;,&quot;2019-11-05T00:00:00.000&quot;,&quot;2019-11-06T00:00:00.000&quot;,&quot;2019-11-07T00:00:00.000&quot;,&quot;2019-11-08T00:00:00.000&quot;,&quot;2019-11-09T00:00:00.000&quot;,&quot;2019-11-10T00:00:00.000&quot;,&quot;2019-11-11T00:00:00.000&quot;,&quot;2019-11-12T00:00:00.000&quot;,&quot;2019-11-13T00:00:00.000&quot;,&quot;2019-11-14T00:00:00.000&quot;,&quot;2019-11-16T00:00:00.000&quot;,&quot;2019-11-17T00:00:00.000&quot;],&quot;yAxis&quot;:[1,1,2,1,4,3,2,2,1,3,2,2,3,3,6,2,2,3,2,3,2,5,1,1,3,6,2,6,3,3,1,1,1,5,10,3,1,1,5,2,10,1,2,2,2,2,2,2,3,6,1,3,2,1,4,2,1,5,3,2,2,6,1,3,2,4,1,4,4,2,2,1,1,1,1,3,4,1,5,1,4,2,4,1,1,4,2,2,1,1,1,1,2,3,1,2,9,4,1,1,5,2,5,4,1,1,1,2,8,1,6,2,2,1,1,8,1,7,3,1,8,6,3,4,2,12,3,4,4,2,5,1,4,1,5,1,3,4,3,1,5,3,5,2,1,10,1,4,3,9,4,1,8,3,1,4,5,2,1,4,2,2,6,8,5,1,1,2,1,4,4,1,3,1,1],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Daily Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE"> [[{&quot;name&quot;:&quot;Ship Mode - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 518 values, 0 or 0% are zeroes and 518 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.4&quot;,&quot;9.8&quot;,&quot;9.5&quot;,&quot;6.6&quot;,&quot;6.1&quot;,&quot;5.5&quot;,&quot;4.7&quot;,&quot;4.0&quot;,&quot;2.7&quot;,&quot;2.5&quot;,&quot;2.3&quot;,&quot;2.2&quot;,&quot;1.8&quot;,&quot;1.7&quot;,&quot;1.4&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;0.9&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;]},{&quot;recordCount&quot;:[518,250,242,169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Texas&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Ohio&quot;,&quot;Florida&quot;,&quot;North Carolina&quot;,&quot;Tennessee&quot;,&quot;Georgia&quot;,&quot;Arizona&quot;,&quot;Indiana&quot;,&quot;Michigan&quot;,&quot;Colorado&quot;,&quot;Virginia&quot;,&quot;Maryland&quot;,&quot;New Jersey&quot;,&quot;Minnesota&quot;,&quot;Kentucky&quot;,&quot;Connecticut&quot;,&quot;Oregon&quot;,&quot;Massachusetts&quot;,&quot;Missouri&quot;,&quot;Rhode Island&quot;,&quot;Wisconsin&quot;,&quot;Delaware&quot;,&quot;New Mexico&quot;,&quot;Oklahoma&quot;,&quot;Utah&quot;,&quot;Arkansas&quot;,&quot;Iowa&quot;,&quot;Louisiana&quot;,&quot;Alabama&quot;,&quot;Idaho&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;South Dakota&quot;,&quot;Nebraska&quot;,&quot;Kansas&quot;,&quot;Montana&quot;,&quot;Nevada&quot;,&quot;North Dakota&quot;,&quot;South Carolina&quot;,&quot;Vermont&quot;,&quot;West Virginia&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:518,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},250,242,169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Ship Mode Count&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCast" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of ship mode in california&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california&quot;,&quot;value&quot;:&quot;california&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;dimensions&quot;,&quot;name&quot;:&quot;dimensions&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;ship_mode&quot;,&quot;value&quot;:&quot;ship mode&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[405,526,1319,414,518,509],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Ship Mode Count - Yearly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;ship_mode_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="compare sales of california and new york" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="compare sales of california and new york" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;compare sales of california and new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;compare&quot;,&quot;value&quot;:&quot;compare&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california,new york&quot;,&quot;value&quot;:&quot;california,new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Percentage of Sales &quot;,&quot;value&quot;:&quot;33.50%&quot;,&quot;type&quot;:&quot;Percentage&quot;,&quot;description&quot;:&quot;Percentage of Sales is 33.50%&quot;},{&quot;name&quot;:&quot;Sales&quot;,&quot;value&quot;:192147.88,&quot;type&quot;:&quot;Result&quot;,&quot;description&quot;:&quot;Sum of sales in the same time period&quot;},{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:768,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 768 rows, forming 4.8% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.qbModelChartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;chartTitle&quot;:&quot;Month Wise Breakdown Of sales By state&quot;,&quot;chartType&quot;:&quot;stackedlinechart&quot;,&quot;data&quot;:{&quot;xAxisLabel&quot;:&quot;sales&quot;,&quot;yAxisLabel&quot;:[&quot;California&quot;,&quot;New York&quot;],&quot;columnNames&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;columnValues&quot;:[[4885,6369,11982,8523,10470,6405,12045,17129,19235,14452,8543],[346,1079,3048,2648,2986,8856,3872,6730,14093,25322,3130]]}}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;DataQuality&quot;,&quot;queryName&quot;:&quot;dataQualityQuery&quot;},{&quot;displayName&quot;:&quot;CentralTendency&quot;,&quot;queryName&quot;:&quot;centralTendencyQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;},{&quot;displayName&quot;:&quot;DataProfile1&quot;,&quot;queryName&quot;:&quot;dataProfile1Query&quot;},{&quot;displayName&quot;:&quot;DataProfile3&quot;,&quot;queryName&quot;:&quot;dataProfile3Query&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dataQuality" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;compare sales of california and new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dataQualityQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;compare&quot;,&quot;value&quot;:&quot;compare&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california,new york&quot;,&quot;value&quot;:&quot;california,new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilterCompare&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="DataQualityAssertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Sales - Zero Count&quot;,&quot;value&quot;:&quot;0&quot;,&quot;type&quot;:&quot;totalZeroCountQuery&quot;,&quot;description&quot;:&quot;Out of the 768 values, 0 or 0% are zeroes and 768 or 100% are non-zero.&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;compare sales of california and new york&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;compare&quot;,&quot;value&quot;:&quot;compare&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;california,new york&quot;,&quot;value&quot;:&quot;california,new york&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;sales&quot;,&quot;value&quot;:&quot;sales&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownMeasureByDimensionWithFilterCompare&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.9&quot;,&quot;12.6&quot;,&quot;9.9&quot;,&quot;6.0&quot;,&quot;5.9&quot;,&quot;3.9&quot;,&quot;3.6&quot;,&quot;3.5&quot;,&quot;3.4&quot;,&quot;3.3&quot;,&quot;3.1&quot;,&quot;2.4&quot;,&quot;2.2&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.5&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.0&quot;,&quot;1.0&quot;,&quot;0.8&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.1&quot;,&quot;0.0&quot;]},{&quot;recordCount&quot;:[518,250,169,156,242,101,43,68,140,58,120,46,63,30,23,33,55,32,35,16,35,31,27,5,28,18,11,17,28,16,15,18,7,7,5,12,7,4,7,4,5,5,4,10,12,6,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Texas&quot;,&quot;Florida&quot;,&quot;Michigan&quot;,&quot;North Carolina&quot;,&quot;Illinois&quot;,&quot;Georgia&quot;,&quot;Ohio&quot;,&quot;Indiana&quot;,&quot;Tennessee&quot;,&quot;Kentucky&quot;,&quot;Missouri&quot;,&quot;Maryland&quot;,&quot;Arizona&quot;,&quot;New Jersey&quot;,&quot;Colorado&quot;,&quot;Oklahoma&quot;,&quot;Virginia&quot;,&quot;Minnesota&quot;,&quot;Massachusetts&quot;,&quot;Montana&quot;,&quot;Connecticut&quot;,&quot;Wisconsin&quot;,&quot;Louisiana&quot;,&quot;Delaware&quot;,&quot;Oregon&quot;,&quot;New Mexico&quot;,&quot;Utah&quot;,&quot;Rhode Island&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;Nevada&quot;,&quot;Arkansas&quot;,&quot;Idaho&quot;,&quot;West Virginia&quot;,&quot;South Dakota&quot;,&quot;South Carolina&quot;,&quot;North Dakota&quot;,&quot;Kansas&quot;,&quot;Vermont&quot;,&quot;Alabama&quot;,&quot;Iowa&quot;,&quot;Nebraska&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[{&quot;value&quot;:120038.3921277523,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},72109.4864885807,56565.502069950104,34392.21361255646,33728.19640040398,22119.180493831635,20769.728958129883,20218.42096912861,19292.59590613842,18812.21981358528,17540.423998594284,13919.909942388535,12410.506086230278,8401.039790153503,8347.029751777649,8336.060044050217,8128.773939609528,7630.219960689545,6770.952071428299,6215.109998226166,5648.870026350021,5500.739982128143,4816.973952770233,4229.27997303009,3743.5600147247314,3236.8700728416443,3123.0800654888153,3099.0729875564575,2862.8270369768143,2569.047966003418,2460.637936592102,1918.2299897670746,1766.0200157165527,1509.4300231933594,1468.5580501556396,1350.220027923584,1212.235996246338,1209.8239917755127,1127.9100122451782,1115.1699867248535,891.5300121307373,699.8599996566772,637.1800003051758,627.0899903774261,613.0599975585938,298.2899980545044,77.76000213623047],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Sales&quot;,&quot;chartTitle&quot;:&quot;Sales By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="daily count of orders" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="daily count of orders" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of orders&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-02T00:00:00.000&quot;,&quot;2019-01-04T00:00:00.000&quot;,&quot;2019-01-05T00:00:00.000&quot;,&quot;2019-01-06T00:00:00.000&quot;,&quot;2019-01-07T00:00:00.000&quot;,&quot;2019-01-08T00:00:00.000&quot;,&quot;2019-01-09T00:00:00.000&quot;,&quot;2019-01-10T00:00:00.000&quot;,&quot;2019-01-11T00:00:00.000&quot;,&quot;2019-01-13T00:00:00.000&quot;,&quot;2019-01-15T00:00:00.000&quot;,&quot;2019-01-16T00:00:00.000&quot;,&quot;2019-01-17T00:00:00.000&quot;,&quot;2019-01-18T00:00:00.000&quot;,&quot;2019-01-19T00:00:00.000&quot;,&quot;2019-01-20T00:00:00.000&quot;,&quot;2019-01-21T00:00:00.000&quot;,&quot;2019-01-23T00:00:00.000&quot;,&quot;2019-01-24T00:00:00.000&quot;,&quot;2019-01-25T00:00:00.000&quot;,&quot;2019-01-26T00:00:00.000&quot;,&quot;2019-01-27T00:00:00.000&quot;,&quot;2019-01-28T00:00:00.000&quot;,&quot;2019-01-29T00:00:00.000&quot;,&quot;2019-01-30T00:00:00.000&quot;,&quot;2019-01-31T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-02-02T00:00:00.000&quot;,&quot;2019-02-04T00:00:00.000&quot;,&quot;2019-02-05T00:00:00.000&quot;,&quot;2019-02-06T00:00:00.000&quot;,&quot;2019-02-07T00:00:00.000&quot;,&quot;2019-02-08T00:00:00.000&quot;,&quot;2019-02-09T00:00:00.000&quot;,&quot;2019-02-11T00:00:00.000&quot;,&quot;2019-02-12T00:00:00.000&quot;,&quot;2019-02-13T00:00:00.000&quot;,&quot;2019-02-14T00:00:00.000&quot;,&quot;2019-02-15T00:00:00.000&quot;,&quot;2019-02-17T00:00:00.000&quot;,&quot;2019-02-19T00:00:00.000&quot;,&quot;2019-02-20T00:00:00.000&quot;,&quot;2019-02-21T00:00:00.000&quot;,&quot;2019-02-22T00:00:00.000&quot;,&quot;2019-02-23T00:00:00.000&quot;,&quot;2019-02-25T00:00:00.000&quot;,&quot;2019-02-26T00:00:00.000&quot;,&quot;2019-02-27T00:00:00.000&quot;,&quot;2019-02-28T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-03-02T00:00:00.000&quot;,&quot;2019-03-03T00:00:00.000&quot;,&quot;2019-03-05T00:00:00.000&quot;,&quot;2019-03-06T00:00:00.000&quot;,&quot;2019-03-07T00:00:00.000&quot;,&quot;2019-03-08T00:00:00.000&quot;,&quot;2019-03-09T00:00:00.000&quot;,&quot;2019-03-10T00:00:00.000&quot;,&quot;2019-03-11T00:00:00.000&quot;,&quot;2019-03-12T00:00:00.000&quot;,&quot;2019-03-13T00:00:00.000&quot;,&quot;2019-03-14T00:00:00.000&quot;,&quot;2019-03-15T00:00:00.000&quot;,&quot;2019-03-16T00:00:00.000&quot;,&quot;2019-03-17T00:00:00.000&quot;,&quot;2019-03-18T00:00:00.000&quot;,&quot;2019-03-19T00:00:00.000&quot;,&quot;2019-03-20T00:00:00.000&quot;,&quot;2019-03-21T00:00:00.000&quot;,&quot;2019-03-22T00:00:00.000&quot;,&quot;2019-03-23T00:00:00.000&quot;,&quot;2019-03-24T00:00:00.000&quot;,&quot;2019-03-25T00:00:00.000&quot;,&quot;2019-03-26T00:00:00.000&quot;,&quot;2019-03-27T00:00:00.000&quot;,&quot;2019-03-28T00:00:00.000&quot;,&quot;2019-03-29T00:00:00.000&quot;,&quot;2019-03-30T00:00:00.000&quot;,&quot;2019-03-31T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-04-02T00:00:00.000&quot;,&quot;2019-04-03T00:00:00.000&quot;,&quot;2019-04-04T00:00:00.000&quot;,&quot;2019-04-05T00:00:00.000&quot;,&quot;2019-04-06T00:00:00.000&quot;,&quot;2019-04-07T00:00:00.000&quot;,&quot;2019-04-08T00:00:00.000&quot;,&quot;2019-04-10T00:00:00.000&quot;,&quot;2019-04-11T00:00:00.000&quot;,&quot;2019-04-12T00:00:00.000&quot;,&quot;2019-04-14T00:00:00.000&quot;,&quot;2019-04-15T00:00:00.000&quot;,&quot;2019-04-16T00:00:00.000&quot;,&quot;2019-04-17T00:00:00.000&quot;,&quot;2019-04-18T00:00:00.000&quot;,&quot;2019-04-19T00:00:00.000&quot;,&quot;2019-04-20T00:00:00.000&quot;,&quot;2019-04-21T00:00:00.000&quot;,&quot;2019-04-22T00:00:00.000&quot;,&quot;2019-04-23T00:00:00.000&quot;,&quot;2019-04-24T00:00:00.000&quot;,&quot;2019-04-25T00:00:00.000&quot;,&quot;2019-04-26T00:00:00.000&quot;,&quot;2019-04-27T00:00:00.000&quot;,&quot;2019-04-28T00:00:00.000&quot;,&quot;2019-04-29T00:00:00.000&quot;,&quot;2019-04-30T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-05-02T00:00:00.000&quot;,&quot;2019-05-04T00:00:00.000&quot;,&quot;2019-05-05T00:00:00.000&quot;,&quot;2019-05-06T00:00:00.000&quot;,&quot;2019-05-07T00:00:00.000&quot;,&quot;2019-05-08T00:00:00.000&quot;,&quot;2019-05-09T00:00:00.000&quot;,&quot;2019-05-10T00:00:00.000&quot;,&quot;2019-05-11T00:00:00.000&quot;,&quot;2019-05-12T00:00:00.000&quot;,&quot;2019-05-13T00:00:00.000&quot;,&quot;2019-05-14T00:00:00.000&quot;,&quot;2019-05-15T00:00:00.000&quot;,&quot;2019-05-16T00:00:00.000&quot;,&quot;2019-05-17T00:00:00.000&quot;,&quot;2019-05-18T00:00:00.000&quot;,&quot;2019-05-19T00:00:00.000&quot;,&quot;2019-05-20T00:00:00.000&quot;,&quot;2019-05-21T00:00:00.000&quot;,&quot;2019-05-22T00:00:00.000&quot;,&quot;2019-05-23T00:00:00.000&quot;,&quot;2019-05-24T00:00:00.000&quot;,&quot;2019-05-25T00:00:00.000&quot;,&quot;2019-05-26T00:00:00.000&quot;,&quot;2019-05-27T00:00:00.000&quot;,&quot;2019-05-29T00:00:00.000&quot;,&quot;2019-05-30T00:00:00.000&quot;,&quot;2019-05-31T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-06-02T00:00:00.000&quot;,&quot;2019-06-03T00:00:00.000&quot;,&quot;2019-06-04T00:00:00.000&quot;,&quot;2019-06-05T00:00:00.000&quot;,&quot;2019-06-06T00:00:00.000&quot;,&quot;2019-06-07T00:00:00.000&quot;,&quot;2019-06-08T00:00:00.000&quot;,&quot;2019-06-09T00:00:00.000&quot;,&quot;2019-06-10T00:00:00.000&quot;,&quot;2019-06-11T00:00:00.000&quot;,&quot;2019-06-12T00:00:00.000&quot;,&quot;2019-06-13T00:00:00.000&quot;,&quot;2019-06-14T00:00:00.000&quot;,&quot;2019-06-15T00:00:00.000&quot;,&quot;2019-06-16T00:00:00.000&quot;,&quot;2019-06-17T00:00:00.000&quot;,&quot;2019-06-18T00:00:00.000&quot;,&quot;2019-06-19T00:00:00.000&quot;,&quot;2019-06-20T00:00:00.000&quot;,&quot;2019-06-21T00:00:00.000&quot;,&quot;2019-06-22T00:00:00.000&quot;,&quot;2019-06-23T00:00:00.000&quot;,&quot;2019-06-25T00:00:00.000&quot;,&quot;2019-06-26T00:00:00.000&quot;,&quot;2019-06-27T00:00:00.000&quot;,&quot;2019-06-28T00:00:00.000&quot;,&quot;2019-06-29T00:00:00.000&quot;,&quot;2019-06-30T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-07-02T00:00:00.000&quot;,&quot;2019-07-03T00:00:00.000&quot;,&quot;2019-07-04T00:00:00.000&quot;,&quot;2019-07-05T00:00:00.000&quot;,&quot;2019-07-06T00:00:00.000&quot;,&quot;2019-07-07T00:00:00.000&quot;,&quot;2019-07-08T00:00:00.000&quot;,&quot;2019-07-09T00:00:00.000&quot;,&quot;2019-07-10T00:00:00.000&quot;,&quot;2019-07-11T00:00:00.000&quot;,&quot;2019-07-12T00:00:00.000&quot;,&quot;2019-07-13T00:00:00.000&quot;,&quot;2019-07-14T00:00:00.000&quot;,&quot;2019-07-15T00:00:00.000&quot;,&quot;2019-07-16T00:00:00.000&quot;,&quot;2019-07-17T00:00:00.000&quot;,&quot;2019-07-18T00:00:00.000&quot;,&quot;2019-07-19T00:00:00.000&quot;,&quot;2019-07-21T00:00:00.000&quot;,&quot;2019-07-22T00:00:00.000&quot;,&quot;2019-07-23T00:00:00.000&quot;,&quot;2019-07-24T00:00:00.000&quot;,&quot;2019-07-25T00:00:00.000&quot;,&quot;2019-07-26T00:00:00.000&quot;,&quot;2019-07-27T00:00:00.000&quot;,&quot;2019-07-28T00:00:00.000&quot;,&quot;2019-07-29T00:00:00.000&quot;,&quot;2019-07-30T00:00:00.000&quot;,&quot;2019-07-31T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-08-02T00:00:00.000&quot;,&quot;2019-08-03T00:00:00.000&quot;,&quot;2019-08-04T00:00:00.000&quot;,&quot;2019-08-05T00:00:00.000&quot;,&quot;2019-08-06T00:00:00.000&quot;,&quot;2019-08-07T00:00:00.000&quot;,&quot;2019-08-08T00:00:00.000&quot;,&quot;2019-08-09T00:00:00.000&quot;,&quot;2019-08-10T00:00:00.000&quot;,&quot;2019-08-11T00:00:00.000&quot;,&quot;2019-08-12T00:00:00.000&quot;,&quot;2019-08-13T00:00:00.000&quot;,&quot;2019-08-15T00:00:00.000&quot;,&quot;2019-08-16T00:00:00.000&quot;,&quot;2019-08-17T00:00:00.000&quot;,&quot;2019-08-18T00:00:00.000&quot;,&quot;2019-08-19T00:00:00.000&quot;,&quot;2019-08-20T00:00:00.000&quot;,&quot;2019-08-21T00:00:00.000&quot;,&quot;2019-08-22T00:00:00.000&quot;,&quot;2019-08-23T00:00:00.000&quot;,&quot;2019-08-24T00:00:00.000&quot;,&quot;2019-08-25T00:00:00.000&quot;,&quot;2019-08-26T00:00:00.000&quot;,&quot;2019-08-27T00:00:00.000&quot;,&quot;2019-08-28T00:00:00.000&quot;,&quot;2019-08-29T00:00:00.000&quot;,&quot;2019-08-30T00:00:00.000&quot;,&quot;2019-08-31T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-09-02T00:00:00.000&quot;,&quot;2019-09-03T00:00:00.000&quot;,&quot;2019-09-04T00:00:00.000&quot;,&quot;2019-09-05T00:00:00.000&quot;,&quot;2019-09-06T00:00:00.000&quot;,&quot;2019-09-07T00:00:00.000&quot;,&quot;2019-09-08T00:00:00.000&quot;,&quot;2019-09-09T00:00:00.000&quot;,&quot;2019-09-10T00:00:00.000&quot;,&quot;2019-09-11T00:00:00.000&quot;,&quot;2019-09-12T00:00:00.000&quot;,&quot;2019-09-13T00:00:00.000&quot;,&quot;2019-09-14T00:00:00.000&quot;,&quot;2019-09-15T00:00:00.000&quot;,&quot;2019-09-16T00:00:00.000&quot;,&quot;2019-09-17T00:00:00.000&quot;,&quot;2019-09-18T00:00:00.000&quot;,&quot;2019-09-19T00:00:00.000&quot;,&quot;2019-09-20T00:00:00.000&quot;,&quot;2019-09-21T00:00:00.000&quot;,&quot;2019-09-22T00:00:00.000&quot;,&quot;2019-09-23T00:00:00.000&quot;,&quot;2019-09-24T00:00:00.000&quot;,&quot;2019-09-25T00:00:00.000&quot;,&quot;2019-09-26T00:00:00.000&quot;,&quot;2019-09-27T00:00:00.000&quot;,&quot;2019-09-28T00:00:00.000&quot;,&quot;2019-09-29T00:00:00.000&quot;,&quot;2019-09-30T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-10-02T00:00:00.000&quot;,&quot;2019-10-03T00:00:00.000&quot;,&quot;2019-10-04T00:00:00.000&quot;,&quot;2019-10-05T00:00:00.000&quot;,&quot;2019-10-06T00:00:00.000&quot;,&quot;2019-10-07T00:00:00.000&quot;,&quot;2019-10-08T00:00:00.000&quot;,&quot;2019-10-09T00:00:00.000&quot;,&quot;2019-10-10T00:00:00.000&quot;,&quot;2019-10-11T00:00:00.000&quot;,&quot;2019-10-12T00:00:00.000&quot;,&quot;2019-10-13T00:00:00.000&quot;,&quot;2019-10-14T00:00:00.000&quot;,&quot;2019-10-15T00:00:00.000&quot;,&quot;2019-10-16T00:00:00.000&quot;,&quot;2019-10-17T00:00:00.000&quot;,&quot;2019-10-18T00:00:00.000&quot;,&quot;2019-10-19T00:00:00.000&quot;,&quot;2019-10-20T00:00:00.000&quot;,&quot;2019-10-21T00:00:00.000&quot;,&quot;2019-10-22T00:00:00.000&quot;,&quot;2019-10-23T00:00:00.000&quot;,&quot;2019-10-24T00:00:00.000&quot;,&quot;2019-10-25T00:00:00.000&quot;,&quot;2019-10-26T00:00:00.000&quot;,&quot;2019-10-27T00:00:00.000&quot;,&quot;2019-10-28T00:00:00.000&quot;,&quot;2019-10-29T00:00:00.000&quot;,&quot;2019-10-30T00:00:00.000&quot;,&quot;2019-10-31T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;,&quot;2019-11-02T00:00:00.000&quot;,&quot;2019-11-03T00:00:00.000&quot;,&quot;2019-11-04T00:00:00.000&quot;,&quot;2019-11-05T00:00:00.000&quot;,&quot;2019-11-06T00:00:00.000&quot;,&quot;2019-11-07T00:00:00.000&quot;,&quot;2019-11-08T00:00:00.000&quot;,&quot;2019-11-09T00:00:00.000&quot;,&quot;2019-11-10T00:00:00.000&quot;,&quot;2019-11-11T00:00:00.000&quot;,&quot;2019-11-12T00:00:00.000&quot;,&quot;2019-11-13T00:00:00.000&quot;,&quot;2019-11-14T00:00:00.000&quot;,&quot;2019-11-15T00:00:00.000&quot;,&quot;2019-11-16T00:00:00.000&quot;,&quot;2019-11-17T00:00:00.000&quot;],&quot;yAxis&quot;:[1,8,8,1,2,1,4,1,1,3,2,6,2,18,3,8,1,6,4,12,4,12,4,3,6,11,3,5,1,10,7,10,6,4,1,2,5,8,1,2,6,10,12,2,5,3,1,6,8,3,5,3,9,6,1,13,3,8,4,5,10,5,10,11,7,9,1,5,7,20,10,6,13,6,8,4,9,9,15,5,14,5,9,10,1,4,1,4,11,11,10,11,2,8,7,4,5,5,10,12,8,7,9,13,1,7,3,4,10,5,14,15,3,12,8,7,16,8,1,6,7,2,17,15,9,8,5,11,12,9,8,10,4,8,2,7,6,8,17,9,5,4,6,4,4,20,1,6,17,9,5,4,2,9,10,15,15,1,11,7,10,10,5,6,17,7,8,7,11,4,9,4,4,11,8,3,15,3,5,10,2,8,22,6,4,1,12,5,18,8,12,8,1,1,5,14,3,11,7,5,3,5,8,3,3,11,9,11,6,5,1,8,9,3,4,16,12,14,13,8,8,7,12,6,1,14,3,5,8,10,30,14,27,12,12,21,10,22,13,30,7,16,8,17,8,14,17,13,12,20,34,10,20,21,4,12,13,5,4,16,14,5,17,5,10,21,6,1,18,4,12,7,6,9,10,7,7,5,21,9,8,7,14,6,11,5,11,9,9,15,22,18,16,10,15,14,16,14,11,4,1,3,3],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Daily Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of orders&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;trendRecordEntity&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[204,250,621,227,242,248],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="daily count of orders in texas" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="daily count of orders in texas" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;daily count of orders in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;timedimension&quot;,&quot;name&quot;:&quot;timedimension&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;by day&quot;,&quot;value&quot;:&quot;daily&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;action&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;count&quot;,&quot;value&quot;:&quot;count&quot;},{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:242,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 242 rows, forming 1.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-04T00:00:00.000&quot;,&quot;2019-01-05T00:00:00.000&quot;,&quot;2019-01-16T00:00:00.000&quot;,&quot;2019-01-18T00:00:00.000&quot;,&quot;2019-01-23T00:00:00.000&quot;,&quot;2019-01-27T00:00:00.000&quot;,&quot;2019-02-08T00:00:00.000&quot;,&quot;2019-02-14T00:00:00.000&quot;,&quot;2019-02-19T00:00:00.000&quot;,&quot;2019-02-26T00:00:00.000&quot;,&quot;2019-03-02T00:00:00.000&quot;,&quot;2019-03-06T00:00:00.000&quot;,&quot;2019-03-07T00:00:00.000&quot;,&quot;2019-03-08T00:00:00.000&quot;,&quot;2019-03-09T00:00:00.000&quot;,&quot;2019-03-12T00:00:00.000&quot;,&quot;2019-03-14T00:00:00.000&quot;,&quot;2019-03-20T00:00:00.000&quot;,&quot;2019-03-21T00:00:00.000&quot;,&quot;2019-03-22T00:00:00.000&quot;,&quot;2019-03-23T00:00:00.000&quot;,&quot;2019-03-24T00:00:00.000&quot;,&quot;2019-03-25T00:00:00.000&quot;,&quot;2019-03-27T00:00:00.000&quot;,&quot;2019-03-29T00:00:00.000&quot;,&quot;2019-03-30T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-04-02T00:00:00.000&quot;,&quot;2019-04-04T00:00:00.000&quot;,&quot;2019-04-10T00:00:00.000&quot;,&quot;2019-04-18T00:00:00.000&quot;,&quot;2019-04-21T00:00:00.000&quot;,&quot;2019-04-22T00:00:00.000&quot;,&quot;2019-04-23T00:00:00.000&quot;,&quot;2019-04-25T00:00:00.000&quot;,&quot;2019-04-27T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-05-11T00:00:00.000&quot;,&quot;2019-05-15T00:00:00.000&quot;,&quot;2019-05-17T00:00:00.000&quot;,&quot;2019-05-23T00:00:00.000&quot;,&quot;2019-05-25T00:00:00.000&quot;,&quot;2019-05-27T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-06-03T00:00:00.000&quot;,&quot;2019-06-04T00:00:00.000&quot;,&quot;2019-06-05T00:00:00.000&quot;,&quot;2019-06-06T00:00:00.000&quot;,&quot;2019-06-07T00:00:00.000&quot;,&quot;2019-06-08T00:00:00.000&quot;,&quot;2019-06-10T00:00:00.000&quot;,&quot;2019-06-12T00:00:00.000&quot;,&quot;2019-06-20T00:00:00.000&quot;,&quot;2019-06-23T00:00:00.000&quot;,&quot;2019-06-25T00:00:00.000&quot;,&quot;2019-06-26T00:00:00.000&quot;,&quot;2019-06-30T00:00:00.000&quot;,&quot;2019-07-04T00:00:00.000&quot;,&quot;2019-07-05T00:00:00.000&quot;,&quot;2019-07-06T00:00:00.000&quot;,&quot;2019-07-07T00:00:00.000&quot;,&quot;2019-07-10T00:00:00.000&quot;,&quot;2019-07-25T00:00:00.000&quot;,&quot;2019-07-27T00:00:00.000&quot;,&quot;2019-08-03T00:00:00.000&quot;,&quot;2019-08-07T00:00:00.000&quot;,&quot;2019-08-08T00:00:00.000&quot;,&quot;2019-08-11T00:00:00.000&quot;,&quot;2019-08-13T00:00:00.000&quot;,&quot;2019-08-22T00:00:00.000&quot;,&quot;2019-08-24T00:00:00.000&quot;,&quot;2019-08-30T00:00:00.000&quot;,&quot;2019-09-08T00:00:00.000&quot;,&quot;2019-09-11T00:00:00.000&quot;,&quot;2019-09-12T00:00:00.000&quot;,&quot;2019-09-15T00:00:00.000&quot;,&quot;2019-09-16T00:00:00.000&quot;,&quot;2019-09-19T00:00:00.000&quot;,&quot;2019-09-20T00:00:00.000&quot;,&quot;2019-09-21T00:00:00.000&quot;,&quot;2019-09-22T00:00:00.000&quot;,&quot;2019-09-25T00:00:00.000&quot;,&quot;2019-09-27T00:00:00.000&quot;,&quot;2019-09-30T00:00:00.000&quot;,&quot;2019-10-04T00:00:00.000&quot;,&quot;2019-10-05T00:00:00.000&quot;,&quot;2019-10-06T00:00:00.000&quot;,&quot;2019-10-07T00:00:00.000&quot;,&quot;2019-10-08T00:00:00.000&quot;,&quot;2019-10-11T00:00:00.000&quot;,&quot;2019-10-15T00:00:00.000&quot;,&quot;2019-10-16T00:00:00.000&quot;,&quot;2019-10-23T00:00:00.000&quot;,&quot;2019-10-24T00:00:00.000&quot;,&quot;2019-10-26T00:00:00.000&quot;,&quot;2019-10-28T00:00:00.000&quot;,&quot;2019-10-30T00:00:00.000&quot;,&quot;2019-10-31T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;,&quot;2019-11-03T00:00:00.000&quot;,&quot;2019-11-04T00:00:00.000&quot;,&quot;2019-11-09T00:00:00.000&quot;,&quot;2019-11-10T00:00:00.000&quot;,&quot;2019-11-11T00:00:00.000&quot;,&quot;2019-11-12T00:00:00.000&quot;,&quot;2019-11-15T00:00:00.000&quot;],&quot;yAxis&quot;:[4,7,1,4,1,1,2,4,3,1,1,3,1,2,1,2,1,2,2,1,4,1,1,1,1,6,4,1,1,2,1,1,3,2,1,3,2,4,7,4,3,2,4,2,1,2,1,1,1,2,4,1,1,3,2,2,3,1,2,2,1,5,1,1,2,2,4,1,4,3,5,1,5,6,1,1,3,2,4,1,4,1,2,1,2,3,1,1,1,3,1,3,1,2,2,7,3,1,3,2,5,1,1,1,2,1],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Daily Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders_count&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: true,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [&#xd;
      {&#xd;
        &quot;type&quot;: &quot;daterange&quot;,&#xd;
        &quot;name&quot;: &quot;daterange&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;2019-01-01,2019-12-31&quot;,&#xd;
        &quot;value&quot;: &quot;2019-01-01,2019-12-31&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;type&quot;: &quot;measure&quot;,&#xd;
        &quot;name&quot;: &quot;measure&quot;,&#xd;
        &quot;operator&quot;: &quot;&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;orders&quot;,&#xd;
        &quot;value&quot;: &quot;orders&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;: &quot;breakdown_dimensions&quot;,&#xd;
        &quot;value&quot;: &quot;category&quot;,&#xd;
        &quot;resolutionValue&quot;: &quot;category&quot;,&#xd;
        &quot;exclude&quot;: false,&#xd;
        &quot;contains&quot;: false,&#xd;
        &quot;type&quot;: &quot;breakdown_dimensions&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
    &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="orders by category " enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="orders by category" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category &quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:2544,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 2544 rows, forming 16.1% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;60.7&quot;,&quot;20.1&quot;,&quot;19.2&quot;]},{&quot;recordCount&quot;:[1545,511,488]}],&quot;xAxis&quot;:[&quot;Office Supplies&quot;,&quot;Furniture&quot;,&quot;Technology&quot;],&quot;yAxis&quot;:[1545,511,488],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Orders&quot;,&quot;chartTitle&quot;:&quot;Orders By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TimeLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[132,118,225,197,243,243,222,226,452,295,191],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimension&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[2131,2578,6573,2024,2544,2397],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="orders by category in texas" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="orders by category in texas" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: null&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Entity Assertion" enabled="true">
            <stringProp name="JSON_PATH">.resp.entities</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="MetricCardData Assertion" enabled="true">
            <stringProp name="JSON_PATH">.metricCardData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;name&quot;:&quot;Record Count&quot;,&quot;value&quot;:242,&quot;type&quot;:&quot;Record Count&quot;,&quot;description&quot;:&quot;Result set is made up of 242 rows, forming 1.5% of the entire data&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;6.4&quot;,&quot;1.6&quot;,&quot;1.5&quot;]},{&quot;recordCount&quot;:[164,40,38]}],&quot;xAxis&quot;:[&quot;Office Supplies&quot;,&quot;Furniture&quot;,&quot;Technology&quot;],&quot;yAxis&quot;:[164,40,38],&quot;chartType&quot;:&quot;piechart&quot;,&quot;yAxisLabel&quot;:&quot;Orders&quot;,&quot;chartTitle&quot;:&quot;Orders By Category&quot;,&quot;xAxisLabel&quot;:&quot;Category&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsBasicQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsBasicQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;TrendLineChart&quot;,&quot;queryName&quot;:&quot;timeBreakQuery&quot;},{&quot;displayName&quot;:&quot;InsightChart&quot;,&quot;queryName&quot;:&quot;dimensionsQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsProQueriesAssertion" enabled="true">
            <stringProp name="JSON_PATH">.insightsProQueries</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;displayName&quot;:&quot;Forecast&quot;,&quot;queryName&quot;:&quot;forecastQuery&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeLineChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;timeBreakQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TimeLineChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2019-01-01T00:00:00.000&quot;,&quot;2019-02-01T00:00:00.000&quot;,&quot;2019-03-01T00:00:00.000&quot;,&quot;2019-04-01T00:00:00.000&quot;,&quot;2019-05-01T00:00:00.000&quot;,&quot;2019-06-01T00:00:00.000&quot;,&quot;2019-07-01T00:00:00.000&quot;,&quot;2019-08-01T00:00:00.000&quot;,&quot;2019-09-01T00:00:00.000&quot;,&quot;2019-10-01T00:00:00.000&quot;,&quot;2019-11-01T00:00:00.000&quot;],&quot;yAxis&quot;:[18,10,30,19,26,26,13,22,31,31,16],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Monthly Trend&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insightsChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;dimensionsQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="insightsChartAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[{&quot;percentageDistribution&quot;:[&quot;20.4&quot;,&quot;9.8&quot;,&quot;9.5&quot;,&quot;6.6&quot;,&quot;6.1&quot;,&quot;5.5&quot;,&quot;4.7&quot;,&quot;4.0&quot;,&quot;2.7&quot;,&quot;2.5&quot;,&quot;2.3&quot;,&quot;2.2&quot;,&quot;1.8&quot;,&quot;1.7&quot;,&quot;1.4&quot;,&quot;1.4&quot;,&quot;1.3&quot;,&quot;1.3&quot;,&quot;1.2&quot;,&quot;1.2&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;1.1&quot;,&quot;0.9&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.7&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.6&quot;,&quot;0.5&quot;,&quot;0.5&quot;,&quot;0.4&quot;,&quot;0.4&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.3&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.2&quot;,&quot;0.1&quot;]},{&quot;recordCount&quot;:[518,250,242,169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2]}],&quot;xAxis&quot;:[&quot;California&quot;,&quot;New York&quot;,&quot;Texas&quot;,&quot;Washington&quot;,&quot;Pennsylvania&quot;,&quot;Illinois&quot;,&quot;Ohio&quot;,&quot;Florida&quot;,&quot;North Carolina&quot;,&quot;Tennessee&quot;,&quot;Georgia&quot;,&quot;Arizona&quot;,&quot;Indiana&quot;,&quot;Michigan&quot;,&quot;Colorado&quot;,&quot;Virginia&quot;,&quot;Maryland&quot;,&quot;New Jersey&quot;,&quot;Minnesota&quot;,&quot;Kentucky&quot;,&quot;Connecticut&quot;,&quot;Oregon&quot;,&quot;Massachusetts&quot;,&quot;Missouri&quot;,&quot;Rhode Island&quot;,&quot;Wisconsin&quot;,&quot;Delaware&quot;,&quot;New Mexico&quot;,&quot;Oklahoma&quot;,&quot;Utah&quot;,&quot;Arkansas&quot;,&quot;Iowa&quot;,&quot;Louisiana&quot;,&quot;Alabama&quot;,&quot;Idaho&quot;,&quot;Mississippi&quot;,&quot;New Hampshire&quot;,&quot;South Dakota&quot;,&quot;Nebraska&quot;,&quot;Kansas&quot;,&quot;Montana&quot;,&quot;Nevada&quot;,&quot;North Dakota&quot;,&quot;South Carolina&quot;,&quot;Vermont&quot;,&quot;West Virginia&quot;,&quot;District Of Columbia&quot;],&quot;yAxis&quot;:[518,250,{&quot;value&quot;:242,&quot;itemStyle&quot;:{&quot;color&quot;:&quot;#a90000&quot;}},169,156,140,120,101,68,63,58,55,46,43,35,35,33,32,31,30,28,28,27,23,18,18,17,16,16,15,12,12,11,10,7,7,7,7,6,5,5,5,5,4,4,4,2],&quot;chartType&quot;:&quot;bar&quot;,&quot;yAxisLabel&quot;:&quot;Orders&quot;,&quot;chartTitle&quot;:&quot;Orders By State&quot;,&quot;xAxisLabel&quot;:&quot;State&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ForeCastChart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;type&quot;: &quot;normal&quot;,&#xd;
  &quot;text&quot;: &quot;orders by category in texas&quot;,&#xd;
  &quot;from&quot;: {&#xd;
    &quot;id&quot;: &quot;d0a5682f-8e6d-4c5e-8f48-a123a2c838e1&quot;,&#xd;
    &quot;name&quot;: &quot;${NAME}&quot;,&#xd;
    &quot;channelId&quot;: &quot;${CHANNELID}&quot;&#xd;
  },&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;requestType&quot;: &quot;forecastQuery&quot;,&#xd;
    &quot;duplicateEntityValue&quot;: &quot;&quot;,&#xd;
    &quot;choiceSelected&quot;: &quot;&quot;,&#xd;
    &quot;responseType&quot;: &quot;&quot;,&#xd;
    &quot;ignoreNLU&quot;: false,&#xd;
    &quot;pageSize&quot;: 30,&#xd;
    &quot;pageNumber&quot;: 1,&#xd;
    &quot;filters&quot;: [],&#xd;
    &quot;choices&quot;: [],&#xd;
    &quot;entities&quot;: [{&quot;type&quot;:&quot;dimension_value&quot;,&quot;name&quot;:&quot;state&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;texas&quot;,&quot;value&quot;:&quot;texas&quot;,&quot;displayName&quot;:&quot;State&quot;},{&quot;type&quot;:&quot;daterange&quot;,&quot;name&quot;:&quot;daterange&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;2019-01-01,2019-12-31&quot;,&quot;value&quot;:&quot;2019-01-01,2019-12-31&quot;},{&quot;type&quot;:&quot;measure&quot;,&quot;name&quot;:&quot;measure&quot;,&quot;operator&quot;:&quot;&quot;,&quot;resolutionValue&quot;:&quot;orders&quot;,&quot;value&quot;:&quot;orders&quot;},{&quot;name&quot;:&quot;breakdown_dimensions&quot;,&quot;value&quot;:&quot;category&quot;,&quot;resolutionValue&quot;:&quot;category&quot;,&quot;exclude&quot;:false,&quot;contains&quot;:false,&quot;type&quot;:&quot;breakdown_dimensions&quot;}],&#xd;
    &quot;pageNumberChange&quot;: false,&#xd;
    &quot;freeText&quot;: false,&#xd;
    &quot;queryCategory&quot;: &quot;breakDownRecordEntityByDimensionWithFilter&quot;&#xd;
  },&#xd;
  &quot;spellCheck&quot;: true,&#xd;
  &quot;locale&quot;:&quot;${LOCALE}&quot;,&#xd;
   &quot;appName&quot;:&quot;${APPNAME}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="ForeCastAssertion" enabled="true">
            <stringProp name="JSON_PATH">.chartData</stringProp>
            <stringProp name="EXPECTED_VALUE">[[{&quot;infoTooltip&quot;:[],&quot;xAxis&quot;:[&quot;2015-01-01&quot;,&quot;2016-01-01&quot;,&quot;2017-01-01&quot;,&quot;2018-01-01&quot;,&quot;2019-01-01&quot;,&quot;2022-01-01&quot;],&quot;yAxis&quot;:[204,250,621,227,242,248],&quot;chartType&quot;:&quot;line&quot;,&quot;chartTitle&quot;:&quot;Orders - Yearly Trend(Forecast)&quot;,&quot;xAxisLabel&quot;:&quot;ship_date&quot;,&quot;yAxisLabel&quot;:&quot;orders&quot;}]]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
